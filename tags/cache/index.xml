<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cache on NoneBack</title>
    <link>https://noneback.github.io/tags/cache/</link>
    <description>Recent content in Cache on NoneBack created by </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>@NoneBack All rights reserved</copyright>
    <lastBuildDate>Sun, 02 May 2021 13:47:30 +0800</lastBuildDate><atom:link href="https://noneback.github.io/tags/cache/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CPU False Sharing</title>
      <link>https://noneback.github.io/blog/cpu%E4%BC%AA%E5%85%B1%E4%BA%AB/</link>
      <pubDate>Sun, 02 May 2021 13:47:30 +0800</pubDate>
      
      <guid>https://noneback.github.io/blog/cpu%E4%BC%AA%E5%85%B1%E4%BA%AB/</guid>
      <description>&lt;p&gt;The motivation for this post comes from an interview question I was asked: What is CPU false sharing?&lt;/p&gt;
&lt;h2 id=&#34;cpu-cache&#34;&gt;CPU Cache&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start by discussing CPU cache.&lt;/p&gt;
&lt;p&gt;CPU cache is a type of storage medium introduced to bridge the speed gap between the CPU and main memory. In the pyramid-shaped storage hierarchy, it is located just below CPU registers. Its capacity is much smaller than that of main memory, but its speed can be close to the processor&amp;rsquo;s frequency.&lt;/p&gt;
&lt;p&gt;The effectiveness of caching relies on the principle of temporal and spatial locality.&lt;/p&gt;
&lt;p&gt;When the processor issues a memory access request, it first checks if the requested data is in the cache. If it is (a cache hit), it directly returns the data without accessing main memory. If it isn&amp;rsquo;t (a cache miss), it loads the data from main memory into the cache before returning it to the processor.&lt;/p&gt;
&lt;h2 id=&#34;cpu-cache-architecture&#34;&gt;CPU Cache Architecture&lt;/h2&gt;
&lt;p&gt;There are usually three levels of cache between the CPU and main memory. The closer the cache is to the CPU, the faster it is but the smaller its capacity. When accessing data, the CPU first checks &lt;strong&gt;L1&lt;/strong&gt;, then &lt;strong&gt;L2&lt;/strong&gt;, and finally &lt;strong&gt;L3&lt;/strong&gt;. If the data isn&amp;rsquo;t in any of these caches, it must be fetched from main memory.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Cache Architecture&#34; src=&#34;https://i.loli.net/2021/05/12/CSi7FqmcUZk2LTH.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;L1&lt;/strong&gt; is close to the CPU core that uses it. L1 and L2 caches can only be used by a single CPU core.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;L3&lt;/strong&gt; can be shared by all CPU cores in a socket.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cpu-cache-line&#34;&gt;CPU Cache Line&lt;/h2&gt;
&lt;p&gt;Caches operate on the basis of &lt;strong&gt;cache lines&lt;/strong&gt;, which are the smallest unit of data transfer between the cache and main memory, typically 64 bytes. A cache line effectively references a block of memory (64 bytes).&lt;/p&gt;
&lt;p&gt;Loading a cache line has the advantage that if the required data is located close to each other, it can be accessed without reloading the cache.&lt;/p&gt;
&lt;p&gt;However, it can also lead to a problem known as &lt;strong&gt;CPU false sharing&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;cpu-false-sharing&#34;&gt;CPU False Sharing&lt;/h2&gt;
&lt;p&gt;Consider this scenario:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We have a &lt;code&gt;long&lt;/code&gt; variable &lt;code&gt;a&lt;/code&gt;, which is not part of an array but is a standalone variable, and there&amp;rsquo;s another &lt;code&gt;long&lt;/code&gt; variable &lt;code&gt;b&lt;/code&gt; right next to it. When &lt;code&gt;a&lt;/code&gt; is loaded, &lt;code&gt;b&lt;/code&gt; is also loaded into the cache line for free.&lt;/li&gt;
&lt;li&gt;Now, a thread on one CPU core modifies &lt;code&gt;a&lt;/code&gt;, while another thread on a different CPU core reads &lt;code&gt;b&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;a&lt;/code&gt; is modified, both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are loaded into the cache line of the modifying core, and after updating &lt;code&gt;a&lt;/code&gt;, all other cache lines containing &lt;code&gt;a&lt;/code&gt; become invalid, since they no longer hold the latest value of &lt;code&gt;a&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When the other core reads &lt;code&gt;b&lt;/code&gt;, it finds that the cache line is invalid and must reload it from main memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because the cache operates at the level of cache lines, invalidating &lt;code&gt;a&lt;/code&gt;&amp;rsquo;s cache line also invalidates &lt;code&gt;b&lt;/code&gt;, and vice versa.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;False Sharing&#34; src=&#34;https://pic3.zhimg.com/80/v2-32672c4b2b7fc48437fc951c27497bee_1440w.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;This causes a problem:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;b&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; are completely unrelated, but each time &lt;code&gt;a&lt;/code&gt; is updated, &lt;code&gt;b&lt;/code&gt; has to be reloaded from main memory due to a cache miss, slowing down the process.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CPU false sharing&lt;/strong&gt;: When multiple threads modify independent variables that share the same cache line, they unintentionally affect each other&amp;rsquo;s performance. This is known as false sharing.&lt;/p&gt;
&lt;h2 id=&#34;avoiding-cpu-false-sharing&#34;&gt;Avoiding CPU False Sharing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ensure that memory for different variables is not placed adjacently.&lt;/li&gt;
&lt;li&gt;Align variables during compilation to avoid false sharing. See &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AF%B9%E9%BD%90&#34;&gt;data structure alignment&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/65394173&#34;&gt;Discussion: What is CPU False Sharing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/CPU_cache&#34;&gt;Wikipedia - CPU Cache&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>