<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>storage on NoneBack</title>
    <link>https://noneback.github.io/tags/storage/</link>
    <description>Recent content in storage on NoneBack created by </description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>@NoneBack All rights reserved</copyright>
    <lastBuildDate>Tue, 01 Aug 2023 16:15:29 +0800</lastBuildDate><atom:link href="https://noneback.github.io/tags/storage/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dynamo: Amazonâ€™s Highly Available Key-value Store</title>
      <link>https://noneback.github.io/blog/dynamo/</link>
      <pubDate>Tue, 01 Aug 2023 16:15:29 +0800</pubDate>
      
      <guid>https://noneback.github.io/blog/dynamo/</guid>
      <description>&lt;p&gt;An old paper by AWS, Dynamo has been in the market for a long time, and the architecture has likely evolved since the paper&amp;rsquo;s publication. Despite this, the paper was selected as one of the SIGMOD best papers of the year, and there are still many valuable lessons to learn.&lt;/p&gt;
&lt;h2 id=&#34;design&#34;&gt;Design&lt;/h2&gt;
&lt;p&gt;Dynamo is a NoSQL product that provides a key-value storage interface. It emphasizes high availability rather than consistency, which leads to differences in architectural design and technical choices compared to other systems.&lt;/p&gt;
&lt;h2 id=&#34;technical-details&#34;&gt;Technical Details&lt;/h2&gt;
&lt;p&gt;Dynamo has many aspects that may be considered problematic from a technical perspective, such as the NWR (N-W-R) approach. However, given Dynamo&amp;rsquo;s long track record in production, these issues may have been resolved over time, though the paper is not explicit about this. For now, let&amp;rsquo;s discuss some of the aspects I found noteworthy:&lt;/p&gt;
&lt;h3 id=&#34;data-partitioning&#34;&gt;Data Partitioning&lt;/h3&gt;
&lt;p&gt;Dynamo uses a &lt;strong&gt;consistent hashing algorithm&lt;/strong&gt;. Traditional consistent hashing employs a hash ring to address the problem of extensive rehashing when nodes are added or removed, but it cannot avoid issues like data skew and performance imbalance caused by heterogeneous machines. In practice, Dynamo introduces &lt;strong&gt;virtual nodes&lt;/strong&gt; into the hash ring, which elegantly solves these problems.&lt;/p&gt;
&lt;h3 id=&#34;data-write-challenges&#34;&gt;Data Write Challenges&lt;/h3&gt;
&lt;p&gt;Most storage systems ensure a certain level of consistency during writes, trading off lower write performance for reduced read complexity. However, Dynamo takes a different approach.&lt;/p&gt;
&lt;p&gt;Dynamo&amp;rsquo;s design goal is to provide a highly available key-value store that ensures &lt;strong&gt;always writable&lt;/strong&gt; operations while only guaranteeing &lt;strong&gt;eventual consistency&lt;/strong&gt;. To achieve this, Dynamo pushes data conflict resolution to the read operation, &lt;strong&gt;ensuring that writes are never rejected&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;There are two key issues to consider here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Data Conflict Resolution&lt;/strong&gt;: Concurrent reads and writes to the same key by multiple clients can easily lead to data conflicts. Since Dynamo only provides eventual consistency, data on different nodes in the Dynamo ring might be inconsistent.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dynamo uses &lt;strong&gt;vector clocks&lt;/strong&gt; to keep track of data versions and merges them during reads to resolve conflicts.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Replica Data Gaps&lt;/strong&gt;: Since Dynamo employs the NWR gossip protocol, it is theoretically possible that none of the nodes hold the complete data set, requiring synchronization between replicas.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dynamo uses an &lt;strong&gt;anti-entropy process&lt;/strong&gt; to address this, employing &lt;strong&gt;Merkle Trees&lt;/strong&gt; to efficiently detect inconsistencies between replicas and minimize the amount of data transferred.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/noneback/images/picgo/20230801162353.png&#34; alt=&#34;Dynamo Design Considerations&#34;&gt;&lt;/p&gt;
&lt;p&gt;The table in the paper clearly shows the aspects considered during Dynamo&amp;rsquo;s development and the corresponding technical choices. For more information, refer to the original paper.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.raychase.net/2396&#34;&gt;Dynamo&amp;rsquo;s Implementation and Decentralization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://timyang.net/data/dynamo-flawed-architecture-chinese/&#34;&gt;Dynamo&amp;rsquo;s Flawed Architecture (Translation) by Tim Yang&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=915212&#34;&gt;Dynamo: A Flawed Architecture | Hacker News&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Flink-Iceberg-Connector Write Process</title>
      <link>https://noneback.github.io/blog/flinkicebergconnector%E5%86%99%E5%85%A5%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Mon, 10 Oct 2022 10:43:38 +0800</pubDate>
      
      <guid>https://noneback.github.io/blog/flinkicebergconnector%E5%86%99%E5%85%A5%E6%B5%81%E7%A8%8B/</guid>
      <description>&lt;p&gt;The Iceberg community provides an official Flink Connector, and this chapter&amp;rsquo;s source code analysis is based on that.&lt;/p&gt;
&lt;h2 id=&#34;overview-of-the-write-submission-process&#34;&gt;Overview of the Write Submission Process&lt;/h2&gt;
&lt;p&gt;Flink writes data through &lt;code&gt;RowData -&amp;gt; distributeStream -&amp;gt; WriterStream -&amp;gt; CommitterStream&lt;/code&gt;. Before data is committed, it is stored as intermediate files, which become visible to the system after being committed (through writing manifest, snapshot, and metadata files).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://intranetproxy.alipay.com/skylark/lark/0/2022/png/59256351/1655962006990-826460c7-b6fc-4efe-a8e0-65cc080ffea9.png&#34; alt=&#34;Flink-Iceberg Write Flow&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; DataStreamSink&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chainIcebergOperators&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    Preconditions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;checkArgument&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;inputCreator &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Please use forRowData() or forMapperOutputType() to initialize the input DataStream.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    Preconditions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;checkNotNull&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;tableLoader&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Table loader shouldn&amp;#39;t be null&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    DataStream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;RowData&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; rowDataInput &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; inputCreator&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;apply&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uidPrefix&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;table &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        tableLoader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;TableLoader loader &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tableLoader&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; loader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;loadTable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;IOException e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UncheckedIOException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed to load iceberg table from table loader: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; tableLoader&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; equalityFieldIds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; checkAndGetEqualityFieldIds&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    RowType flinkRowType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; toFlinkRowType&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; tableSchema&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    DataStream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;RowData&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; distributeStream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; distributeDataStream&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
        rowDataInput&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;properties&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; equalityFieldIds&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;schema&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; flinkRowType&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    SingleOutputStreamOperator&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;WriteResult&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; writerStream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; appendWriter&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;distributeStream&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; flinkRowType&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
        equalityFieldIds&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    SingleOutputStreamOperator&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Void&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; committerStream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; appendCommitter&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;writerStream&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; appendDummySink&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;committerStream&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;write-process-source-code-analysis&#34;&gt;Write Process Source Code Analysis&lt;/h2&gt;
&lt;h3 id=&#34;writestream&#34;&gt;WriteStream&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; SingleOutputStreamOperator&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;WriteResult&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;appendWriter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;DataStream&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;RowData&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; input&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; RowType flinkRowType&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
                                                             List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; equalityFieldIds&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; upsertMode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; upsert &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; PropertyUtil&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;propertyAsBoolean&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;properties&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt;
        UPSERT_ENABLED&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; UPSERT_ENABLED_DEFAULT&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;upsertMode&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Preconditions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;checkState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;overwrite&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OVERWRITE mode shouldn&amp;#39;t be enabled when configuring to use UPSERT data stream.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        Preconditions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;checkState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;equalityFieldIds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Equality field columns shouldn&amp;#39;t be empty when configuring to use UPSERT data stream.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(!&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isUnpartitioned&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;PartitionField partitionField &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fields&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                Preconditions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;checkState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;equalityFieldIds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;partitionField&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sourceId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()),&lt;/span&gt;
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;In UPSERT mode, partition field &amp;#39;%s&amp;#39; should be included in equality fields: &amp;#39;%s&amp;#39;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
                    partitionField&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; equalityFieldColumns&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    IcebergStreamWriter&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;RowData&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; streamWriter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; createStreamWriter&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; flinkRowType&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; equalityFieldIds&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; upsertMode&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; parallelism &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; writeParallelism &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; input&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getParallelism&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; writeParallelism&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    SingleOutputStreamOperator&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;WriteResult&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; writerStream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input
        &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;transform&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;operatorName&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ICEBERG_STREAM_WRITER_NAME&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; TypeInformation&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;of&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;WriteResult&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;),&lt;/span&gt; streamWriter&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setParallelism&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;parallelism&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uidPrefix &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        writerStream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; writerStream&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;uid&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;uidPrefix &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-writer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; writerStream&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;WriterStream&lt;/code&gt; operator is transformed from the &lt;code&gt;distributeStream&lt;/code&gt;, with &lt;code&gt;RowData&lt;/code&gt; as input and &lt;code&gt;WriteResult&lt;/code&gt; as output. The transformation logic is encapsulated in the &lt;code&gt;IcebergStreamWriter&lt;/code&gt;, which processes each element using &lt;code&gt;processElement&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;transient&lt;/span&gt; TaskWriter&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; writer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;processElement&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;StreamRecord&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; element&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    writer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;write&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;element&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;IcebergStreamWriter&lt;/code&gt; delegates the writing to a &lt;code&gt;TaskWriter&lt;/code&gt; created by &lt;code&gt;TaskWriterFactory&lt;/code&gt;. The specific type could be &lt;code&gt;PartitionedDeltaWriter&lt;/code&gt; or &lt;code&gt;UnpartitionedWriter&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TaskWriter&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;RowData&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    Preconditions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;checkNotNull&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;outputFileFactory&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The outputFileFactory shouldn&amp;#39;t be null if we have invoked the initialize().&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;equalityFieldIds &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; equalityFieldIds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isEmpty&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;spec&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isUnpartitioned&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UnpartitionedWriter&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;spec&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; format&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; appenderFactory&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; outputFileFactory&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; io&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; targetFileSizeBytes&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; RowDataPartitionedFanoutWriter&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;spec&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; format&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; appenderFactory&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; outputFileFactory&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
                io&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; targetFileSizeBytes&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; schema&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; flinkSchema&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;spec&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isUnpartitioned&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UnpartitionedDeltaWriter&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;spec&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; format&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; appenderFactory&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; outputFileFactory&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; io&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
                targetFileSizeBytes&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; schema&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; flinkSchema&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; equalityFieldIds&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; upsert&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PartitionedDeltaWriter&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;spec&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; format&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; appenderFactory&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; outputFileFactory&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; io&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
                targetFileSizeBytes&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; schema&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; flinkSchema&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; equalityFieldIds&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; upsert&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;committerstream&#34;&gt;CommitterStream&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;CommitterStream&lt;/code&gt; receives &lt;code&gt;WriteResult&lt;/code&gt; as input with no output. &lt;code&gt;WriteResult&lt;/code&gt; contains the data files produced by &lt;code&gt;WriteStream&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WriteResult&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Serializable &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; DataFile&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; dataFiles&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; DeleteFile&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; deleteFiles&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; CharSequence&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; referencedDataFiles&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The core logic for processing data file submissions is encapsulated in &lt;code&gt;IcebergFilesCommitter&lt;/code&gt;. The &lt;code&gt;IcebergFilesCommitter&lt;/code&gt; maintains a list of files that need to be committed for each checkpoint. Once a checkpoint completes, it tries to commit those files to Iceberg.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IcebergFilesCommitter&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; AbstractStreamOperator&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Void&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; OneInputStreamOperator&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;WriteResult&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Void&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;,&lt;/span&gt; BoundedOneInput &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; NavigableMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Long&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&amp;gt;&lt;/span&gt; dataFilesPerCheckpoint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Maps&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newTreeMap&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;WriteResult&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; writeResultsOfCurrentCkpt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Lists&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newArrayList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;transient&lt;/span&gt; ListState&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;SortedMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Long&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&amp;gt;&amp;gt;&lt;/span&gt; checkpointsState&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;processElement&lt;/code&gt; method stores &lt;code&gt;WriteResult&lt;/code&gt; from upstream in &lt;code&gt;writeResultsOfCurrentCkpt&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;processElement&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;StreamRecord&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;WriteResult&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; element&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;writeResultsOfCurrentCkpt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;element&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;During checkpointing (&lt;code&gt;snapshotState&lt;/code&gt;), it saves the current checkpoint&amp;rsquo;s data in &lt;code&gt;dataFilesPerCheckpoint&lt;/code&gt;. Later, once the checkpoint is completed (&lt;code&gt;notifyCheckpointComplete&lt;/code&gt;), it commits the files:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;snapshotState&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;StateSnapshotContext context&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; checkpointId &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getCheckpointId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    LOG&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Start to flush snapshot state to state backend, table: {}, checkpointId: {}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; table&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; checkpointId&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    dataFilesPerCheckpoint&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;checkpointId&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; writeToManifest&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;checkpointId&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
    checkpointsState&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;clear&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    checkpointsState&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;dataFilesPerCheckpoint&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    jobIdState&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;clear&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    jobIdState&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;flinkJobId&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    writeResultsOfCurrentCkpt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;clear&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;notifyCheckpointComplete&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; checkpointId&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;checkpointId &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; maxCommittedCheckpointId&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        commitUpToCheckpoint&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;dataFilesPerCheckpoint&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; flinkJobId&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; checkpointId&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;maxCommittedCheckpointId&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; checkpointId&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The commit logic is handled by &lt;code&gt;commitUpToCheckpoint&lt;/code&gt;, which generates a new snapshot and adds it to Iceberg&amp;rsquo;s metadata:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;commitUpToCheckpoint&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NavigableMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Long&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&amp;gt;&lt;/span&gt; deltaManifestsMap&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
                                  String newFlinkJobId&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
                                  &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; checkpointId&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IOException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    NavigableMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Long&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&amp;gt;&lt;/span&gt; pendingMap &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; deltaManifestsMap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;headMap&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;checkpointId&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ManifestFile&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; manifests &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Lists&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newArrayList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    NavigableMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Long&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; WriteResult&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; pendingResults &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Maps&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newTreeMap&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Entry&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Long&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&amp;gt;&lt;/span&gt; e &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; pendingMap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;entrySet&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Arrays&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;EMPTY_MANIFEST_DATA&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

        DeltaManifests deltaManifests &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SimpleVersionedSerialization
            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;readVersionAndDeSerialize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;DeltaManifestsSerializer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;INSTANCE&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        pendingResults&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getKey&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; FlinkManifestUtil&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;readCompletedFiles&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;deltaManifests&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;io&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()));&lt;/span&gt;
        manifests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addAll&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;deltaManifests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;manifests&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; totalFiles &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pendingResults&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;values&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mapToInt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;r &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dataFiles&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;deleteFiles&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    continuousEmptyCheckpoints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; totalFiles &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 0 &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; continuousEmptyCheckpoints &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;totalFiles &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; 0 &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; continuousEmptyCheckpoints &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; maxContinuousEmptyCommits &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;replacePartitions&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            replacePartitions&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pendingResults&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; newFlinkJobId&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; checkpointId&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            commitDeltaTxn&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pendingResults&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; newFlinkJobId&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; checkpointId&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        continuousEmptyCheckpoints &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    pendingMap&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;clear&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ManifestFile manifest &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; manifests&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            table&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;io&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;deleteFile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;manifest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            LOG&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;warn&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The iceberg transaction has been committed, but we failed to clean the temporary flink manifests: {}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
                manifest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;commit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;TableMetadata base&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; TableMetadata metadata&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;base &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; current&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;base &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CommitFailedException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Cannot commit: stale table metadata&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; AlreadyExistsException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Table already exists: %s&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; tableName&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;base &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; metadata&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        LOG&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Nothing to commit.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;currentTimeMillis&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    doCommit&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;base&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; metadata&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    deleteRemovedMetadataFiles&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;base&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; metadata&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    requestRefresh&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

    LOG&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;info&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Successfully committed to table {} in {} ms&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
        tableName&lt;span style=&#34;color:#f92672&#34;&gt;(),&lt;/span&gt;
        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;currentTimeMillis&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; start&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;write-issues&#34;&gt;Write Issues&lt;/h2&gt;
&lt;h3 id=&#34;1-lots-of-small-files&#34;&gt;1. Lots of Small Files&lt;/h3&gt;
&lt;p&gt;For streaming writes, new files are generated each time, resulting in a lot of small files. While object storage supports small files well, it may increase Iceberg metadata overhead, as metadata files need to keep track of each data file. This can cause metadata files to become large and impact performance.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Iceberg Rewrite Action&lt;/strong&gt;: Iceberg supports rewriting data and metadata files via Flink or Spark actions, which need to be triggered separately.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Snapshot Expiry&lt;/strong&gt;: Configure snapshot expiration to periodically delete old snapshots.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.apache.iceberg.flink.actions.Actions&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

TableLoader tableLoader &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; TableLoader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fromHadoopTable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hdfs://nn:8020/warehouse/path&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
Table table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tableLoader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;loadTable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
RewriteDataFilesActionResult result &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Actions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;forTable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;table&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rewriteDataFiles&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://iceberg.apache.org/docs/latest/flink/&#34;&gt;Iceberg Flink Documentation&lt;/a&gt;
&lt;a href=&#34;https://iceberg.apache.org/docs/latest/maintenance/&#34;&gt;Iceberg Maintenance Documentation&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-performance-issues-with-high-concurrency&#34;&gt;2. Performance Issues with High Concurrency&lt;/h3&gt;
&lt;p&gt;Iceberg&amp;rsquo;s writing process creates a new snapshot for each commit and uses optimistic concurrency control to handle conflicts. In high-concurrency scenarios, this can lead to many commits being retried, impacting performance.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Batch Commit&lt;/strong&gt;: Introduce a caching layer or additional service to batch commits to the data lake, reducing the number of concurrent commit operations. This cache layer can also compact multiple data files before committing.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;References:
&lt;a href=&#34;https://zhuanlan.zhihu.com/p/472617094&#34;&gt;Optimizing Iceberg Writes for High Concurrency&lt;/a&gt;
&lt;a href=&#34;https://www.infoq.cn/article/hfft7c7ahoomgayjsouz&#34;&gt;InfoQ Article on Iceberg Optimization&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;3-flink-iceberg-connector-limitations&#34;&gt;3. Flink Iceberg Connector Limitations&lt;/h3&gt;
&lt;p&gt;The Flink Iceberg Connector does not support hidden partitions or preprocessing of partition fields.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Apache-ORC Quick Investigation</title>
      <link>https://noneback.github.io/blog/apacheorc%E8%B0%83%E7%A0%94/</link>
      <pubDate>Wed, 05 Oct 2022 19:56:01 +0800</pubDate>
      
      <guid>https://noneback.github.io/blog/apacheorc%E8%B0%83%E7%A0%94/</guid>
      <description>&lt;p&gt;Iceberg supports both ORC and Parquet columnar formats. Compared to Parquet, ORC offers advantages in query performance and ACID support. Considering the future data lakehouse requirements for query performance and ACID compliance, we are researching ORC to support a future demo involving Flink, Iceberg, and ORC.&lt;/p&gt;
&lt;p&gt;Research Focus: ORC file encoding, file organization, and indexing support.&lt;/p&gt;
&lt;h2 id=&#34;file-layout&#34;&gt;File Layout&lt;/h2&gt;
&lt;p&gt;An ORC file can be divided into three main sections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Header&lt;/strong&gt;: Identifies the file type.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Body&lt;/strong&gt;: Contains row data and indexes, as shown below.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tail&lt;/strong&gt;: Contains top-level file information.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;ORC Specification v1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://intranetproxy.alipay.com/skylark/lark/0/2022/png/59256351/1654164675197-b3513a38-dee1-4fea-a582-1e800542dc06.png#clientId=ubff13205-800f-4&amp;amp;crop=0&amp;amp;crop=0&amp;amp;crop=1&amp;amp;crop=1&amp;amp;from=paste&amp;amp;id=udfb74091&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=567&amp;amp;originWidth=580&amp;amp;originalType=binary&amp;amp;ratio=1&amp;amp;rotation=0&amp;amp;showTitle=false&amp;amp;size=134693&amp;amp;status=done&amp;amp;style=none&amp;amp;taskId=u3792c89f-94b1-497c-81db-a5f9ae97297&amp;amp;title=&#34; alt=&#34;File Layout&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;file-tail&#34;&gt;File Tail&lt;/h3&gt;
&lt;p&gt;Since distributed storage generally supports only append-only semantics, the ORC file maintains a tail section for top-level file information.&lt;/p&gt;
&lt;p&gt;The tail contains:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Postscript&lt;/strong&gt;: Contains essential information for parsing the footer and metadata, such as the length of each section and compression method.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Footer&lt;/strong&gt;: Stores schema information, row count, column statistics, and more.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stripe Statistics and Metadata&lt;/strong&gt;: Includes column-level statistics.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;postscript&#34;&gt;Postscript&lt;/h4&gt;
&lt;p&gt;The postscript is uncompressed and contains:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Footer length&lt;/li&gt;
&lt;li&gt;Compression type&lt;/li&gt;
&lt;li&gt;Metadata length&lt;/li&gt;
&lt;li&gt;File identifier (&amp;ldquo;ORC&amp;rdquo;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;footer&#34;&gt;Footer&lt;/h4&gt;
&lt;p&gt;The footer includes the schema, row count, column-level statistics, and a list of stripes that make up the file body.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Footer&lt;/span&gt; {&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;optional&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint64&lt;/span&gt; headerLength &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;optional&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint64&lt;/span&gt; contentLength &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;repeated&lt;/span&gt; StripeInformation stripes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;repeated&lt;/span&gt; Type types &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;repeated&lt;/span&gt; UserMetadataItem metadata &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;optional&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint64&lt;/span&gt; numberOfRows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;repeated&lt;/span&gt; ColumnStatistics statistics &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;optional&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32&lt;/span&gt; rowIndexStride &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;optional&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32&lt;/span&gt; writer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;optional&lt;/span&gt; Encryption encryption &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;optional&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint64&lt;/span&gt; stripeStatisticsLength &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Stripe Information&lt;/strong&gt;: Data in the body is organized into multiple &lt;strong&gt;stripes&lt;/strong&gt;. Stripes contain row indexes, row data, and stripe footers, which are stored column-wise.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StripeInformation&lt;/span&gt; {&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;optional&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint64&lt;/span&gt; offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;optional&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint64&lt;/span&gt; indexLength &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;optional&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint64&lt;/span&gt; dataLength &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;optional&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint64&lt;/span&gt; footerLength &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;optional&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint64&lt;/span&gt; numberOfRows &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Type Information&lt;/strong&gt;: ORC uses a tree structure to represent nested data types, and the type schema must remain consistent.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;table&lt;/span&gt; Foobar (
  myInt int,
  myMap &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string, struct&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;myString : string, myDouble: double&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;,
  myTime &lt;span style=&#34;color:#66d9ef&#34;&gt;timestamp&lt;/span&gt;
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Column Statistics&lt;/strong&gt;: Simple statistics for each column are available to support coarse-grained filtering.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;stripes&#34;&gt;Stripes&lt;/h2&gt;
&lt;p&gt;The body of an ORC file is split into &lt;strong&gt;stripes&lt;/strong&gt;, which are large chunks of data (typically ~200MB) that contain:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Index Data&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Row Data&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stripe Footer&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;Stripe Footer&lt;/strong&gt; holds column encoding details and stream-related information, such as compression and encryption methods.&lt;/p&gt;
&lt;h2 id=&#34;index-support&#34;&gt;Index Support&lt;/h2&gt;
&lt;p&gt;ORC supports three levels of indexing:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Location&lt;/th&gt;
&lt;th&gt;Data Content&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;File Level&lt;/td&gt;
&lt;td&gt;File Footer&lt;/td&gt;
&lt;td&gt;Column-level statistics for the entire file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Stripe Level&lt;/td&gt;
&lt;td&gt;File Footer&lt;/td&gt;
&lt;td&gt;Column-level statistics for each stripe&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Row Level&lt;/td&gt;
&lt;td&gt;Beginning of Stripe&lt;/td&gt;
&lt;td&gt;Statistics for each row group and their start position&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;row-level-index&#34;&gt;Row Level Index&lt;/h3&gt;
&lt;p&gt;The row-level index contains &lt;strong&gt;Row Group Index&lt;/strong&gt; and &lt;strong&gt;Bloom Filter Index&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id=&#34;row-group-index&#34;&gt;Row Group Index&lt;/h4&gt;
&lt;p&gt;Indexes for primitive types are represented by &lt;strong&gt;ROW_INDEX&lt;/strong&gt; streams, with each row group containing a &lt;strong&gt;RowIndexEntry&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Default row group size: 10,000 rows&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RowIndex&lt;/span&gt; {&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;repeated&lt;/span&gt; RowIndexEntry entry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RowIndexEntry&lt;/span&gt; {&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;repeated&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint64&lt;/span&gt; positions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;packed&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;];&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;optional&lt;/span&gt; ColumnStatistics statistics &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;bloom-filter-index&#34;&gt;Bloom Filter Index&lt;/h4&gt;
&lt;p&gt;Each column has a &lt;strong&gt;BLOOM_FILTER&lt;/strong&gt; stream to help speed up searches.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BloomFilter&lt;/span&gt; {&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;optional&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32&lt;/span&gt; numHashFunctions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;repeated&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fixed64&lt;/span&gt; bitset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;data-access-path&#34;&gt;Data Access Path&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Postscript&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Footer&lt;/strong&gt; -&amp;gt; Retrieve Stripe Information -&amp;gt; &lt;strong&gt;Stripe Footer&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Stripe Index&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Row Group&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Column&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://webcdn.nexla.com/n3x_ctx/uploads/2018/05/An-Introduction-to-Big-Data-Formats-Nexla.pdf&#34;&gt;An Introduction to Big Data Formats - Nexla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://orc.apache.org/docs/&#34;&gt;ORC Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://orc.apache.org/specification/ORCv1/&#34;&gt;ORC Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/article/1757862&#34;&gt;ORC Article by Tencent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Apache-Iceberg Quick Investigation</title>
      <link>https://noneback.github.io/blog/apacheiceberg%E8%B0%83%E7%A0%94/</link>
      <pubDate>Wed, 05 Oct 2022 19:55:54 +0800</pubDate>
      
      <guid>https://noneback.github.io/blog/apacheiceberg%E8%B0%83%E7%A0%94/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;A table format for large-scale analysis of datasets.&lt;/li&gt;
&lt;li&gt;A specification for organizing data files and metadata files.&lt;/li&gt;
&lt;li&gt;A schema semantic abstraction between storage and computation.&lt;/li&gt;
&lt;li&gt;Developed and open-sourced by Netflix to enhance scalability, reliability, and usability.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;Issues encountered when migrating HIVE to the cloud:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dependency on List and Rename semantics makes it impossible to replace HDFS with cheaper OSS.&lt;/li&gt;
&lt;li&gt;Scalability issues: Schema information in Hive is centrally stored in metastore, which can become a performance bottleneck.&lt;/li&gt;
&lt;li&gt;Unsafe operations, CBO unfriendly, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Supports secure and efficient schema, partition changes, and evolution, self-defined schema, hidden partition.
&lt;ul&gt;
&lt;li&gt;Abstracts its own schema, not tied to any computation engine schema; partition is maintained at the schema level. Partition and sort order provide transformer functions, such as date(timestamp).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Supports object storage with minimal dependency on FS semantics.&lt;/li&gt;
&lt;li&gt;ACID semantics support, parallel reads, serialized write operations:
&lt;ul&gt;
&lt;li&gt;Separation of read and write snapshots.&lt;/li&gt;
&lt;li&gt;Optimistic handling of write parallel conflicts, retry to ensure writes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Snapshot support:
&lt;ul&gt;
&lt;li&gt;Data rollback and time travel.&lt;/li&gt;
&lt;li&gt;Supports snapshot expiration (by default, data files are not deleted, but customizable deletion behavior is available) (&lt;a href=&#34;https://iceberg.apache.org/javadoc/0.13.1/org/apache/iceberg/ExpireSnapshots.html&#34;&gt;related API doc&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Incremental reading can be achieved by comparing snapshot differences.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Query optimization-friendly: predicate pushdown, data file statistics. Currently, compaction is not supported, but invalid files can be deleted during snapshot expiration (&lt;a href=&#34;https://iceberg.apache.org/javadoc/0.13.1/org/apache/iceberg/ExpireSnapshots.html#deleteWith-java.util.function.Consumer-&#34;&gt;deleteWith&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;High abstraction level, easy for modification, optimization, and extension. Catalog, read/write paths, file formats, storage dependencies are all pluggable. Iceberg&amp;rsquo;s design goal is to define a standard, open, and general data organization format while hiding differences in underlying data storage formats, providing a unified operational API for different engines to connect through its API.&lt;/li&gt;
&lt;li&gt;Others: file-level encryption and decryption.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ecosystem&#34;&gt;Ecosystem&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Community support for OSS, Flink, Spark, and Presto:
&lt;ul&gt;
&lt;li&gt;Flink (&lt;a href=&#34;https://iceberg.apache.org/docs/latest/flink/&#34;&gt;detail&lt;/a&gt;): Supports streaming reads and writes, incremental reads (based on snapshot), upsert write (&lt;a href=&#34;https://iceberg.apache.org/releases/#0130-release-notes&#34;&gt;0.13.0-release-notes&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Presto: &lt;a href=&#34;https://prestodb.io/docs/current/connector/iceberg.html&#34;&gt;Iceberg connector&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Aliyun OSS: &lt;a href=&#34;https://github.com/apache/iceberg/pull/3686/files&#34;&gt;# pr 3689&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Integration with other components:
&lt;ul&gt;
&lt;li&gt;Integration with lower storage layers: Only relies on three semantics: In-place write, Seekable reads, Deletes, supports AliOSS (&lt;a href=&#34;https://github.com/apache/iceberg/pull/3686/files&#34;&gt;# pr 3689&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Integration with other file formats: High abstraction level, currently supports Avro, Parquet, ORC.&lt;/li&gt;
&lt;li&gt;Catalog: Customizable (&lt;a href=&#34;https://iceberg.apache.org/docs/latest/custom-catalog/&#34;&gt;Doc: Custom Catalog Implementation&lt;/a&gt;), currently supports JDBC, Hive Metastore, Hadoop, etc.&lt;/li&gt;
&lt;li&gt;Integration with computation layer: Provides native JAVA &amp;amp; Python APIs, with a high level of abstraction, supporting most computation engines.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Open and neutral community, allowing contributions to improve influence.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;table-specification&#34;&gt;Table Specification&lt;/h2&gt;
&lt;p&gt;Specification for organizing data files and metadata files.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://iceberg.apache.org/img/iceberg-metadata.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;case-spark--iceberg--local-fs&#34;&gt;Case: Spark + Iceberg + Local FS&lt;/h3&gt;
&lt;p&gt;Iceberg supports Parquet, Avro, ORC file formats.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Storage&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;organization&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;test&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;â”œâ”€â”€&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;data&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;â”‚&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;â”œâ”€â”€&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00000-1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-ccff&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6767-12&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;cc&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;-481&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;-93&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;fc-db&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;57438&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;-00001&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;.parquet&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;â”‚&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;â””â”€â”€&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;00001-2-6&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1e5&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;-89&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;fe&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;-4e77&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-b&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;-1773&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;fbbcc&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8-00001&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;.parquet&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;â””â”€â”€&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;metadata&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;â”œâ”€â”€&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;dc&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0e8&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;-1843-4&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;cb&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9-9&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-ae&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;800&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;bf&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;f-m&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;.avro&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// manifest file
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;â”œâ”€â”€&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;snap&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;-8512048775051875497-1-2&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;dc&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0e8&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;-1843-4&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;cb&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9-9&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;c&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;-ae&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;800&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;bf&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;f.avro&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// manifest list file
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;â”œâ”€â”€&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;.metadata.json&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// metadata file
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;â”œâ”€â”€&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;.metadata.json&lt;/span&gt;
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;â””â”€â”€&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;version-hint.text&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// catalog
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;datafile&#34;&gt;DataFile&lt;/h4&gt;
&lt;p&gt;Data files in columnar format: Parquet, ORC.&lt;/p&gt;
&lt;p&gt;There are three types of Data Files: data file, partition delete file, equality delete file.&lt;/p&gt;
&lt;h4 id=&#34;manifest-file&#34;&gt;Manifest File&lt;/h4&gt;
&lt;p&gt;Indexes data files, including statistics and partition information.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;[
    {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;snapshot_id&amp;#34;&lt;/span&gt;:{
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1274364374047997583&lt;/span&gt;
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;data_file&amp;#34;&lt;/span&gt;:{
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;file_path&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/tmp/warehouse/db/test3/data/id=1/00000-31-401a9d2e-d501-434c-a38f-5df5f08ebbd7-00001.parquet&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;file_format&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PARQUET&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;partition&amp;#34;&lt;/span&gt;:{
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;:{
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                }
            },
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;record_count&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;file_size_in_bytes&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;643&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;block_size_in_bytes&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;67108864&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;column_sizes&amp;#34;&lt;/span&gt;:{
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;array&amp;#34;&lt;/span&gt;:[
                    {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;46&lt;/span&gt;
                    },
                    {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;
                    }
                ]
            },
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value_counts&amp;#34;&lt;/span&gt;:{
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;array&amp;#34;&lt;/span&gt;:[
                    {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                    },
                    {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
                    }
                ]
            },
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;null_value_counts&amp;#34;&lt;/span&gt;:{
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;array&amp;#34;&lt;/span&gt;:[
                    {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
                    },
                    {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
                    }
                ]
            },
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;nan_value_counts&amp;#34;&lt;/span&gt;:{
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;array&amp;#34;&lt;/span&gt;:[

                ]
            },
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;lower_bounds&amp;#34;&lt;/span&gt;:{
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;array&amp;#34;&lt;/span&gt;:[
                    {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000&amp;#34;&lt;/span&gt;
                    },
                    {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;
                    }
                ]
            },
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;upper_bounds&amp;#34;&lt;/span&gt;:{
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;array&amp;#34;&lt;/span&gt;:[
                    {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000&amp;#34;&lt;/span&gt;
                    },
                    {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;
                    }
                ]
            },
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;key_metadata&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;split_offsets&amp;#34;&lt;/span&gt;:{
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;array&amp;#34;&lt;/span&gt;:[
                    &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
                ]
            },
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;sort_order_id&amp;#34;&lt;/span&gt;:{
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            }
        }
    },
    {
       &lt;span style=&#34;color:#75715e&#34;&gt;// another data file meta
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;snapshot&#34;&gt;Snapshot&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Represents the state of a Table at a specific point in time, saved via a Manifest List File.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A new Snapshot is generated every time a data change is made to the Table.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;manifest-list-file&#34;&gt;Manifest List File&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Contains information about all Manifest files in a Snapshot, as well as partition stats and data file count.&lt;/li&gt;
&lt;li&gt;One Snapshot corresponds to one Manifest List File, and each submission generates a manifest list file.&lt;/li&gt;
&lt;li&gt;Optimistic concurrency: when concurrent Snapshot submissions conflict, the later submission &lt;strong&gt;retries&lt;/strong&gt; to ensure submission.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Each manifest list stores metadata about manifests, including partition stats and data file counts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;[
    {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;manifest_path&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/tmp/warehouse/db/test3/metadata/f22b748f-a7bc-4e4c-ad6c-3e335c1c0c2b-m0.avro&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;manifest_length&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;6019&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;partition_spec_id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;added_snapshot_id&amp;#34;&lt;/span&gt;:{
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1274364374047997583&lt;/span&gt;
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;added_data_files_count&amp;#34;&lt;/span&gt;:{
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;existing_data_files_count&amp;#34;&lt;/span&gt;:{
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;deleted_data_files_count&amp;#34;&lt;/span&gt;:{
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;partitions&amp;#34;&lt;/span&gt;:{
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;array&amp;#34;&lt;/span&gt;:[
                {
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;contains_null&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;contains_nan&amp;#34;&lt;/span&gt;:{
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;boolean&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
                    },
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;lower_bound&amp;#34;&lt;/span&gt;:{
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;bytes&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000&amp;#34;&lt;/span&gt;
                    },
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;upper_bound&amp;#34;&lt;/span&gt;:{
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;bytes&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000&amp;#34;&lt;/span&gt;
                    }
                }
            ]
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;added_rows_count&amp;#34;&lt;/span&gt;:{
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;existing_rows_count&amp;#34;&lt;/span&gt;:{
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;deleted_rows_count&amp;#34;&lt;/span&gt;:{
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        }
    },
    {
      &lt;span style=&#34;color:#75715e&#34;&gt;// another manifest file
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;metadata-file&#34;&gt;Metadata File&lt;/h4&gt;
&lt;p&gt;Tracks the state of the table. When the state changes, a new metadata file is generated and replaces the previous one, &lt;strong&gt;ensuring atomicity&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The table metadata file tracks the &lt;strong&gt;table schema&lt;/strong&gt;, &lt;strong&gt;partitioning config&lt;/strong&gt;, custom properties, and &lt;strong&gt;snapshots&lt;/strong&gt; of the table contents.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;format-version&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;table-uuid&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;175d0b61-8507-40b2-9c19-3338b05f3d48&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/tmp/warehouse/db/test3&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last-updated-ms&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1653387947819&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last-column-id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;schema&amp;#34;&lt;/span&gt;:{
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;struct&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;schema-id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;:[
            {
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;required&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;
            },
            &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Object&lt;/span&gt;{&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;}
        ]
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;current-schema-id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;schemas&amp;#34;&lt;/span&gt;:[
        {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;struct&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;schema-id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;:[
                {
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;,
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;required&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;
                },
                &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Object&lt;/span&gt;{&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;}
            ]
        }
    ],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;partition-spec&amp;#34;&lt;/span&gt;:[
        {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;transform&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;identity&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;source-id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;field-id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
        }
    ],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;default-spec-id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;partition-specs&amp;#34;&lt;/span&gt;:[
        {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;spec-id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;:[
                {
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;,
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;transform&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;identity&amp;#34;&lt;/span&gt;,
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;source-id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;field-id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
                }
            ]
        }
    ],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;last-partition-id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;default-sort-order-id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;sort-orders&amp;#34;&lt;/span&gt;:[
        {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;order-id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;:[

            ]
        }
    ],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;:{
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;owner&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chenlan&amp;#34;&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;current-snapshot-id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1274364374047997700&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;snapshots&amp;#34;&lt;/span&gt;:[
        {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;snapshot-id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1274364374047997700&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;timestamp-ms&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1653387947819&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;summary&amp;#34;&lt;/span&gt;:{
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;operation&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;append&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;spark.app.id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;local-1653381214613&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;added-data-files&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;added-records&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;added-files-size&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1286&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;changed-partition-count&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;total-records&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;total-files-size&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1286&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;total-data-files&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;total-delete-files&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;total-position-deletes&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;total-equality-deletes&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;
            },
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;manifest-list&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/tmp/warehouse/db/test3/metadata/snap-1274364374047997583-1-f22b748f-a7bc-4e4c-ad6c-3e335c1c0c2b.avro&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;schema-id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        }
    ],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;snapshot-log&amp;#34;&lt;/span&gt;:[
        {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;timestamp-ms&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1653387947819&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;snapshot-id&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1274364374047997700&lt;/span&gt;
        }

    ],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;metadata-log&amp;#34;&lt;/span&gt;:[
        {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;timestamp-ms&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1653387937345&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;metadata-file&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/tmp/warehouse/db/test3/metadata/v1.metadata.json&amp;#34;&lt;/span&gt;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;catalog&#34;&gt;Catalog&lt;/h4&gt;
&lt;p&gt;Records the latest metadata file path.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pic3.zhimg.com/80/v2-27edee80bbac03b462898a0564722a56_1440w.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;features-1&#34;&gt;Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ACID semantics guarantee: Atomic table state changes + snapshot-based reads and writes.&lt;/li&gt;
&lt;li&gt;Flexible partition management: hidden partition, seamless partition changes.&lt;/li&gt;
&lt;li&gt;Supports incremental reads: incremental read of each change using snapshots.&lt;/li&gt;
&lt;li&gt;Multi-version data: beneficial for data rollback.&lt;/li&gt;
&lt;li&gt;No side effects, safe schema, and partition changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;data-types&#34;&gt;Data Types&lt;/h3&gt;
&lt;p&gt;Data files in different formats define different types.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Nested Types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;struct: A tuple of typed values.&lt;/li&gt;
&lt;li&gt;list: A collection of values with an element type.&lt;/li&gt;
&lt;li&gt;map: A collection of key-value pairs with a key type and a value type.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Primitive Types:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Primitive type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Requirements&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;boolean&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;True or false&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;32-bit signed integers&lt;/td&gt;
&lt;td&gt;Can promote to &lt;code&gt;long&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;long&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;64-bit signed integers&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;float&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/IEEE_754&#34;&gt;32-bit IEEE 754&lt;/a&gt; floating point&lt;/td&gt;
&lt;td&gt;Can promote to double&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;double&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/IEEE_754&#34;&gt;64-bit IEEE 754&lt;/a&gt; floating point&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;decimal(P,S)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Fixed-point decimal; precision P, scale S&lt;/td&gt;
&lt;td&gt;Scale is fixed [1], precision must be 38 or less&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;date&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Calendar date without timezone or time&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;time&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Time of day without date, timezone&lt;/td&gt;
&lt;td&gt;Microsecond precision [2]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;timestamp&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Timestamp without timezone&lt;/td&gt;
&lt;td&gt;Microsecond precision [2]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;timestamptz&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Timestamp with timezone&lt;/td&gt;
&lt;td&gt;Stored as UTC [2]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;string&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Arbitrary-length character sequences&lt;/td&gt;
&lt;td&gt;Encoded with UTF-8 [3]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;uuid&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Universally unique identifiers&lt;/td&gt;
&lt;td&gt;Should use 16-byte fixed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;fixed(L)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Fixed-length byte array of length L&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;binary&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Arbitrary-length byte array&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;read--write-paths&#34;&gt;Read &amp;amp; Write Paths&lt;/h3&gt;
&lt;p&gt;select: catalog -&amp;gt; manifest list file -&amp;gt; manifest file -&amp;gt; data file -&amp;gt; data group.&lt;/p&gt;
&lt;p&gt;insert: reverse (catalog -&amp;gt; manifest list file -&amp;gt; manifest file -&amp;gt; data file -&amp;gt; data group).&lt;/p&gt;
&lt;p&gt;update: delete &amp;amp; insert, data file + partition delete file + equality delete file.&lt;/p&gt;
&lt;p&gt;Using Partition delete file transaction: issue of repeatedly inserting and deleting the same row within a transaction.&lt;/p&gt;
&lt;p&gt;delete: row-level delete.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://iceberg.apache.org/spec/&#34;&gt;Iceberg Spec&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.datatong.net/thread-39745-1-1.html&#34;&gt;Flink+Iceberg Data Lake Construction&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/347660549&#34;&gt;Construction Practice of Real-time Data Warehouse with Flink + Iceberg (Chinese)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/apache/iceberg/pull/3686&#34;&gt;Iceberg Aliyun OSS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://iceberg.apache.org/docs/latest/flink/&#34;&gt;Iceberg Flink Support&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/305746643&#34;&gt;Building Enterprise-grade Real-time Data Lake with Flink + Iceberg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/353030161&#34;&gt;How Flink Analyzes CDC Data in Iceberg Real-time Data Lake&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/apache/iceberg&#34;&gt;Iceberg GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.alluxio.io/os/user/stable/en/api/POSIX-API.html&#34;&gt;Alluxio POSIX API&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/110748218&#34;&gt;Comparison of Delta, Iceberg, and Hudi Open-source Data Lake Solutions&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>