<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>microservice on NoneBack</title>
    <link>https://noneback.github.io/tags/microservice/</link>
    <description>Recent content in microservice on NoneBack created by </description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>@NoneBack All rights reserved</copyright>
    <lastBuildDate>Thu, 20 May 2021 23:55:11 +0800</lastBuildDate><atom:link href="https://noneback.github.io/tags/microservice/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Distributed Transactions</title>
      <link>https://noneback.github.io/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Thu, 20 May 2021 23:55:11 +0800</pubDate>
      
      <guid>https://noneback.github.io/blog/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</guid>
      <description>&lt;h1 id=&#34;transactions-and-distributed-transactions&#34;&gt;Transactions and Distributed Transactions&lt;/h1&gt;
&lt;h2 id=&#34;transactions&#34;&gt;Transactions&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;transaction&lt;/strong&gt; is a logical unit of work in a database, composed of a finite sequence of database operations. The database must ensure the &lt;strong&gt;atomicity&lt;/strong&gt; of transaction operations: when a transaction is successful, it means that all operations in the transaction have been fully executed; if the transaction fails, all executed SQL operations are rolled back.&lt;/p&gt;
&lt;p&gt;A single-node database transaction has four main properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Atomicity&lt;/strong&gt;: The transaction is executed as a whole. Either all operations within the transaction are executed, or none are executed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt;: The transaction must ensure that the database moves from one consistent state to another. Consistent states mean that the data in the database must satisfy all integrity constraints.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Isolation&lt;/strong&gt;: When multiple transactions are executed concurrently, the execution of one transaction should not affect the execution of others.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Durability&lt;/strong&gt;: Changes made by a committed transaction should be permanently stored in the database.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;distributed-transactions&#34;&gt;Distributed Transactions&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;distributed transaction&lt;/strong&gt; is a transaction where the &lt;strong&gt;participants&lt;/strong&gt;, &lt;strong&gt;transaction-supporting servers&lt;/strong&gt;, &lt;strong&gt;resource servers&lt;/strong&gt;, and &lt;strong&gt;transaction manager&lt;/strong&gt; are located on different nodes of a distributed system.&lt;/p&gt;
&lt;p&gt;With the adoption of microservice architectures, large business domains often involve multiple services, and a business process requires participation from multiple services. In specific business scenarios, data consistency among multiple services must be ensured.&lt;/p&gt;
&lt;p&gt;For example, in a large e-commerce system, the order interface typically deducts inventory, reduces discounts, and generates an order ID. The order service, inventory, discount, and order ID are all separate services. The success of the order interface depends not only on local database operations but also on third-party system results. In this case, distributed transactions ensure that all these operations either succeed together or fail together.&lt;/p&gt;
&lt;p&gt;In essence, &lt;strong&gt;distributed transactions are used to ensure data consistency across different databases&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id=&#34;use-cases&#34;&gt;Use Cases&lt;/h1&gt;
&lt;p&gt;Typical use cases in e-commerce systems include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Order Inventory Deduction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When placing an order, operations include generating an order record and reducing product inventory. These are handled by separate microservices, so distributed transactions are required to ensure the atomicity of the order operation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Third-Party Payments&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In a microservice architecture, payment and orders are independent services. The order payment status depends on a notification from the financial service, which, in turn, depends on notifications from a third-party payment service.&lt;/p&gt;
&lt;p&gt;A classic scenario is illustrated below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaomi-info.github.io/2020/01/02/distributed-transaction/notify-message.png&#34; alt=&#34;https://xiaomi-info.github.io/2020/01/02/distributed-transaction/notify-message.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;From the diagram, there are two calls: the third-party payment service calling the payment service, and the payment service calling the order service. Both calls can encounter &lt;strong&gt;timeouts&lt;/strong&gt;. Without distributed transactions, the actual payment status and the final payment status visible to the user may become &lt;strong&gt;inconsistent&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;implementation-approaches&#34;&gt;Implementation Approaches&lt;/h1&gt;
&lt;h2 id=&#34;two-phase-commit-2pc&#34;&gt;Two-Phase Commit (2PC)&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/05/19/MfWzxseBFKaAnhk.png&#34; alt=&#34;https://i.loli.net/2021/05/19/MfWzxseBFKaAnhk.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;A transaction commit is divided into two phases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Preparation Phase&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The transaction manager (TM) initiates the transaction, logs the start of the transaction, and asks the participating resource managers (RMs) whether they can execute the commit operation, then waits for their responses.&lt;/li&gt;
&lt;li&gt;RMs execute local transactions, log redo/undo data, and return results to TM, but do not commit.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Commit/Rollback Phase&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If all participating RMs execute successfully, the transaction proceeds to the &lt;strong&gt;commit phase&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;TM logs the commit, sends a commit instruction to all RMs.&lt;/li&gt;
&lt;li&gt;RMs commit the local transaction and respond to TM.&lt;/li&gt;
&lt;li&gt;TM logs the end of the transaction.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If any RM fails or times out during preparation or commit:
&lt;ul&gt;
&lt;li&gt;TM logs the rollback, sends rollback instructions to all RMs.&lt;/li&gt;
&lt;li&gt;RMs rollback the local transaction and respond to TM.&lt;/li&gt;
&lt;li&gt;TM logs the end of the transaction.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;characteristics&#34;&gt;Characteristics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Atomicity&lt;/strong&gt;: Supported&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt;: Strong consistency&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Isolation&lt;/strong&gt;: Supported&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Durability&lt;/strong&gt;: Supported&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;disadvantages&#34;&gt;Disadvantages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Synchronous Blocking&lt;/strong&gt;: When participants occupy shared resources, others can only wait for resource release, leading to blocking.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Single Point of Failure&lt;/strong&gt;: If the transaction manager fails, the entire system becomes unavailable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data Inconsistency&lt;/strong&gt;: If the transaction manager only sends some commit messages, and a network issue occurs, only some participants receive the commit message, leading to inconsistency.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Uncertainty&lt;/strong&gt;: If both the transaction manager and a participant fail after sending a commit message, it is uncertain whether the message was successfully committed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;local-message-table&#34;&gt;Local Message Table&lt;/h2&gt;
&lt;p&gt;The transaction initiator maintains a &lt;strong&gt;local message table&lt;/strong&gt;, and operations on the business table and the message table are within the same local transaction. Asynchronously, a &lt;strong&gt;scheduled task&lt;/strong&gt; scans the message table and delivers the message downstream.&lt;/p&gt;
&lt;p&gt;The broad concept of the local message table also allows downstream notification through methods other than message delivery, such as RPC calls.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/05/19/tmNeiALsdof24PW.png&#34; alt=&#34;https://i.loli.net/2021/05/19/tmNeiALsdof24PW.png&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The initiator executes a local transaction, operating both the business table and the local message table.&lt;/li&gt;
&lt;li&gt;A scheduled task scans pending local messages (in the message table) and sends them to the message queue:
&lt;ul&gt;
&lt;li&gt;If successful, mark the local message as sent.&lt;/li&gt;
&lt;li&gt;If failed, retry until successful.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The message queue delivers the message downstream.&lt;/li&gt;
&lt;li&gt;The downstream transaction participant receives the message and executes a local transaction:
&lt;ul&gt;
&lt;li&gt;If failed, no ACK is returned, and the message queue retries.&lt;/li&gt;
&lt;li&gt;If successful, an ACK is returned, marking the end of the global transaction.&lt;/li&gt;
&lt;li&gt;If the message or ACK is lost, the message queue retries.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;exceptional-scenarios&#34;&gt;Exceptional Scenarios&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Message Loss&lt;/strong&gt;: Handled by repeating the scheduled task.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Delivery Failure&lt;/strong&gt;: Handled by retries, downstream must ensure idempotency.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ACK Loss&lt;/strong&gt;: Handled by retries, downstream must ensure idempotency.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;advantages-and-challenges&#34;&gt;Advantages and Challenges&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;High system throughput, asynchronous downstream transactions via middleware decoupling.&lt;/li&gt;
&lt;li&gt;Moderate business intrusion, requiring local message tables and scheduled tasks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Challenges&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Incomplete transaction support, downstream transactions cannot be rolled back, only retried.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;characteristics-1&#34;&gt;Characteristics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Atomicity&lt;/strong&gt;: Supported&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt;: Eventual consistency&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Isolation&lt;/strong&gt;: Not supported (committed branch transactions are visible to other transactions)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Durability&lt;/strong&gt;: Supported&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;best-effort-notification&#34;&gt;Best-Effort Notification&lt;/h2&gt;
&lt;p&gt;The best-effort notification is a simple approach to flexible transactions, suitable for business with low time sensitivity to eventual consistency, where the result of the passive party does not affect the initiator&amp;rsquo;s result.&lt;/p&gt;
&lt;p&gt;This approach roughly works as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;System A completes its local transaction and sends a message to the MQ.&lt;/li&gt;
&lt;li&gt;A service consumes the MQ and calls System B&amp;rsquo;s interface.&lt;/li&gt;
&lt;li&gt;If System B succeeds, everything is fine; if it fails, the notification service periodically retries calling System B up to N times. If it still fails, it gives up.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;advantages-and-challenges-1&#34;&gt;Advantages and Challenges&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simple implementation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Challenges&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No compensation mechanism, no guarantee of delivery.&lt;/li&gt;
&lt;li&gt;Requires idempotency, with interfaces ensuring consistency and atomicity.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;characteristics-2&#34;&gt;Characteristics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Atomicity&lt;/strong&gt;: Not supported (requires additional interfaces)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistency&lt;/strong&gt;: Not supported (requires additional interfaces)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Isolation&lt;/strong&gt;: Not supported (committed branch transactions are visible to other transactions)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Durability&lt;/strong&gt;: Supported&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;classic-scenario&#34;&gt;Classic Scenario&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Payment Callback&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;The payment service receives a successful payment notification from a third-party service, updates the payment status of the order, and synchronously notifies the order service. If this synchronous notification fails, an asynchronous script will keep retrying the order service interface.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xiaomi-info.github.io/2020/01/02/distributed-transaction/try-best-notify.jpg&#34; alt=&#34;https://xiaomi-info.github.io/2020/01/02/distributed-transaction/try-best-notify.jpg&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://xiaomi-info.github.io/2020/01/02/distributed-transaction/&#34;&gt;Distributed Transactions: All You Need to Know&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>