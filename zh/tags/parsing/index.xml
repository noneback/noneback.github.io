<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>parsing on NoneBack</title>
    <link>https://noneback.github.io/zh/tags/parsing/</link>
    <description>Recent content in parsing on NoneBack created by </description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>@NoneBack All rights reserved</copyright>
    <lastBuildDate>Sun, 22 Nov 2020 20:53:19 +0800</lastBuildDate><atom:link href="https://noneback.github.io/zh/tags/parsing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>算术表达式语法分析</title>
      <link>https://noneback.github.io/zh/blog/zh/%E7%AE%97%E6%9C%AF%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 22 Nov 2020 20:53:19 +0800</pubDate>
      
      <guid>https://noneback.github.io/zh/blog/zh/%E7%AE%97%E6%9C%AF%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;编译原理的第二次实验，使用 LR 方法实现对算术表达式的语法分析&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;文法：
E-&amp;gt;E+T|E-T|T
T-&amp;gt;T*F|T/F|F
F-&amp;gt;(E)|num
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;dfa&#34;&gt;DFA&lt;/h2&gt;
&lt;p&gt;首先要根据文法构建一个 DFA&lt;/p&gt;
&lt;h3 id=&#34;构造拓广文法-gs&#34;&gt;构造拓广文法 G(s)&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;拓广文法G：
S-&amp;gt;E
E-&amp;gt;E+T|E-T|T
T-&amp;gt;T*F|T/F|F
F-&amp;gt;(E)|num
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;构造有效项目集和相应-dfa&#34;&gt;构造有效项目集和相应 DFA&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/11/22/Hz5lLiGA9P2woWq.png&#34; alt=&#34;DFA.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;slr&#34;&gt;SLR&lt;/h2&gt;
&lt;p&gt;从 DFA 中可以观察到使用 LR(0)将会有 Shift-Reduce 冲突，所以最终使用 SLR 分析。&lt;/p&gt;
&lt;p&gt;构造 SLR 需要在 LR(0)的基础上计算出 First 和 Follow 集合&lt;/p&gt;
&lt;h3 id=&#34;构造-first-和-follow-集合&#34;&gt;构造 FIRST 和 FOLLOW 集合&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;&lt;/th&gt;
&lt;th&gt;E&lt;/th&gt;
&lt;th&gt;T&lt;/th&gt;
&lt;th&gt;F&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;First&lt;/td&gt;
&lt;td&gt;(,num&lt;/td&gt;
&lt;td&gt;(,num&lt;/td&gt;
&lt;td&gt;(,num&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Follow&lt;/td&gt;
&lt;td&gt;+,-,#,)&lt;/td&gt;
&lt;td&gt;+,-,#,*,/,)&lt;/td&gt;
&lt;td&gt;+,-,#,*,/,)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;构造-slr-分析表&#34;&gt;构造 SLR 分析表&lt;/h2&gt;
&lt;p&gt;规约时，需要判断下一个的符号是否属于被规约状态的 Follow 集合中。在 Follow 集合中才允许被规约&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/11/22/VdNI8BqwePEaOjF.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;编写代码&#34;&gt;编写代码&lt;/h2&gt;
&lt;p&gt;相对于之前构造 DFA 和分析表，代码的实现显得则更为简单。但要注意代码的质量。&lt;/p&gt;
&lt;h3 id=&#34;算法&#34;&gt;算法&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2020/11/22/IHnOyeqZY9EJ4rt.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;实现&#34;&gt;实现&lt;/h3&gt;
&lt;p&gt;实现的关键在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Action,ActionKind&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Action&lt;/span&gt; {  ActionKind kind;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id;};&lt;span style=&#34;color:#75715e&#34;&gt;// id is for reduce and shift
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ActionKind&lt;/span&gt; { Error, Shift, Reduce, Accpet };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保存 ActionMap 和 GotoMap,产生式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; unordered_map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string, Action&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; ActionMap;&lt;span style=&#34;color:#75715e&#34;&gt;//需要16个，与状态数对应
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; unordered_map&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string, State&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; GotoMap;&lt;span style=&#34;color:#75715e&#34;&gt;//需要16个，与状态数对应
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; pair&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string, string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; producers[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;T&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;T*F&amp;#34;&lt;/span&gt;},
    &lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;//将产生式填入
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;};

&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialMaps&lt;/span&gt;(vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ActionMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;am, vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;GotoMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;gm) {
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; string actions[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;]{
      {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s4&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s5&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;},
      {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s7&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s6&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a11&amp;#34;&lt;/span&gt;},
      &lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;};

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; gotos[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
     {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;},
     &lt;span style=&#34;color:#75715e&#34;&gt;//...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;};

  &lt;span style=&#34;color:#75715e&#34;&gt;//  （ ） - + * / num $
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// E    T    F
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
    ActionMap a;
    GotoMap g;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      a[T[j]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parse2Action(actions[i][j]);
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;; k&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      g[V[k]] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gotos[i][k];
    }
    am.push_back(a);
    gm.push_back(g);
  }
}


&lt;span style=&#34;color:#75715e&#34;&gt;//从表中解析出Action
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// string s format:a char+digits,like s1,r2,a1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Action &lt;span style=&#34;color:#a6e22e&#34;&gt;parse2Action&lt;/span&gt;(string s) {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (s.length() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; s.length() &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Action{Error, Error};
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; kind &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tolower(s[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; stoi(s.substr(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, s.length() &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));

  &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (kind) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Action{Reduce, id};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Action{Shift, id};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Action{Accpet, Accpet};
    &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Action{Error, Error};
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lexer&lt;/p&gt;
&lt;p&gt;由于是语法分析实验，所以词法分析写的比较简单&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// simple lex,suppose that there is no error in token while lexing
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// return like{&amp;#34;(&amp;#34;,&amp;#34;num&amp;#34;,&amp;#34;)&amp;#34;}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; lex2Str(string sourceStr) {
    vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; ans;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; sourceStr.length(); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      string cur &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string{sourceStr[i]};
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (T.find(cur) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; T.end()) {
        ans.push_back(cur);
      } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#75715e&#34;&gt;// parse num
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        ans.push_back(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;num&amp;#34;&lt;/span&gt;);
        i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
      }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;StatesStack,EnteredStack,CharacterQueue 三个关键数据结构的维护与 Parse 函数的编写&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DigitExpressionParser&lt;/span&gt; {
 &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
  stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; entered;
  queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; characters;
  unordered_set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; T{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;num&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;};
  unordered_set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; V{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;E&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;T&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;F&amp;#34;&lt;/span&gt;};
  stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;State&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; states;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ActionMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; am;
  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;GotoMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; gm;

  vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; lex2Str(string sourceStr)
  &lt;span style=&#34;color:#75715e&#34;&gt;//  function overload for different container to pop numofEle
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; pop(queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;q, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; num)

  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; pop(stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; num)

  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; pop(stack&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;State&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; num)

  &lt;span style=&#34;color:#75715e&#34;&gt;// initial parser
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; _init(string sourceString)

 &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
  DigitExpressionParser() { initialMaps(am, gm); }

  &lt;span style=&#34;color:#75715e&#34;&gt;// parse
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parse&lt;/span&gt;(string sourseStr) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;_init(sourseStr)) {
      cerr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error:source string empty or wrong token&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (true) {
      State curState &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; states.top();
      string curCharacter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; characters.front();

      &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;action &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; am[curState][curCharacter];

      &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (action.kind) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; Shift:states.push(action.id);
          entered.push(curCharacter);
          characters.pop();
          &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; Reduce: {
          &lt;span style=&#34;color:#75715e&#34;&gt;// use producer[id] to reduce
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;          printProducer(action.id);
          &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt; producer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; producers[action.id];
          &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; popNum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; producer.second &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;num&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; producer.second.size();
          pop(states, popNum);
          pop(entered, popNum);
          entered.push(producer.first);

          states.push(gm[states.top()][producer.first]);
        }
          &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; Error:cerr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error while parsing&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; false;

        &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; Accpet:cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Accepted&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;
          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
      }
    }
  }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;优化&#34;&gt;优化&lt;/h3&gt;
&lt;p&gt;实验上有一些是可以优化(卷)的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First 和 Follow 集合，有效项目集，分析表能够使用代码自动生成&lt;/li&gt;
&lt;li&gt;num 的可以使用数字代替，解析为 token&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果觉得不够卷还可以&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可视化(呸)&lt;/li&gt;
&lt;li&gt;写一个计算器&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>实现简单的SQL数据库--前端</title>
      <link>https://noneback.github.io/zh/blog/zh/%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%89%8D%E7%AB%AF/</link>
      <pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://noneback.github.io/zh/blog/zh/%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%89%8D%E7%AB%AF/</guid>
      <description>&lt;p&gt;一直想去完成pingcap的tanlent Plan里面的tinySql路径，但一直没有开始。最近论坛上发现了pingcap创始人的tanlent plan入坑贴，下面的学长提示了这个从零实现数据库博客入门比较合适，于是写下这个博客。&lt;/p&gt;
&lt;h2 id=&#34;前端&#34;&gt;前端&lt;/h2&gt;
&lt;p&gt;与编译器类似，一个数据库软件也分为前端和后端。前端部分主要是SQL语句的解析以及一个REPL。&lt;/p&gt;
&lt;h3 id=&#34;获取tokens&#34;&gt;获取tokens&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
 &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
 &lt;span style=&#34;color:#a6e22e&#34;&gt;kind&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;tokenKind&lt;/span&gt;
 &lt;span style=&#34;color:#a6e22e&#34;&gt;loc&lt;/span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;模拟cursor扫描语句，将sql语句解析为一个一个token，token中包括了&lt;strong&gt;单词的种类，位置，值&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;获取单个token时，每次扫描结束，如果成功，更新光标，并返回一个新token地址以及更新后的光标位置，ok=true。&lt;/p&gt;
&lt;p&gt;如果失败，则返回nil,传入的初始化的光标位置不变，ok=false。&lt;/p&gt;
&lt;p&gt;最终处理所有语句，得到token地址数组&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 主要流程
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lex&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;source&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) ([]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
 &lt;span style=&#34;color:#a6e22e&#34;&gt;tokens&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt;{}
 &lt;span style=&#34;color:#a6e22e&#34;&gt;cur&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt;{}

 &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cur&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pointer&lt;/span&gt; &amp;lt; uint(len(&lt;span style=&#34;color:#a6e22e&#34;&gt;source&lt;/span&gt;)) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;lexers&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#a6e22e&#34;&gt;lexer&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;lexKeyword&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;lexSymbol&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;lexString&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;lexNumeric&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;lexIdentifier&lt;/span&gt;}
  &lt;span style=&#34;color:#a6e22e&#34;&gt;isMatched&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lexers&lt;/span&gt; {
   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;newCursor&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;l&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;source&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cur&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;cur&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;newCursor&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;// Omit nil tokens for valid, but empty syntax like newlines
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
     &lt;span style=&#34;color:#a6e22e&#34;&gt;tokens&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;tokens&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt;)
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;isMatched&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
   }
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isMatched&lt;/span&gt; {
   &lt;span style=&#34;color:#75715e&#34;&gt;// match the next one
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
  }

  &lt;span style=&#34;color:#a6e22e&#34;&gt;hint&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;tokens&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
   &lt;span style=&#34;color:#a6e22e&#34;&gt;hint&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; after &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tokens&lt;/span&gt;[len(&lt;span style=&#34;color:#a6e22e&#34;&gt;tokens&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unable to lex token%s, at %d:%d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;hint&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cur&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;loc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;row&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cur&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;loc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt;)
 }
 &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tokens&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;获得ast&#34;&gt;获得Ast&lt;/h3&gt;
&lt;p&gt;第二步，从tokens中，解析出一个抽象语法树。&lt;/p&gt;
&lt;p&gt;Ast有statement[]组成，目前的解析器只解析select，insert，create三种语句。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Ast&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
 &lt;span style=&#34;color:#a6e22e&#34;&gt;Statement&lt;/span&gt; []&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Statement&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Statement&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
 &lt;span style=&#34;color:#a6e22e&#34;&gt;SelectStatement&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SelectStatement&lt;/span&gt;
 &lt;span style=&#34;color:#a6e22e&#34;&gt;CreateStatement&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CreateStatement&lt;/span&gt;
 &lt;span style=&#34;color:#a6e22e&#34;&gt;InsertStatement&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;InsertStatement&lt;/span&gt;
 &lt;span style=&#34;color:#a6e22e&#34;&gt;Kind&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;AstKind&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解析的思路是按照不同的sql语句，分析出相应的语法成分，最后形成最后的语法树&lt;/p&gt;
&lt;h4 id=&#34;select语句&#34;&gt;SELECT语句&lt;/h4&gt;
&lt;p&gt;语法成分：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SELECT  ${ expression[] }$  FROM $ tableName $&lt;/p&gt;
&lt;p&gt;example：select id,age,name from students&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.解析出keyword SELECT&lt;/p&gt;
&lt;p&gt;2.解析expression[]&lt;/p&gt;
&lt;p&gt;3.解析出keyword FROM&lt;/p&gt;
&lt;p&gt;4.解析identifier  $tableName$&lt;/p&gt;
&lt;p&gt;其中重点在于对expressions的理解与解析&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// parse the token at cursor and return an expression containing literal val and its kind
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parseExpression&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tokens&lt;/span&gt; []&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;initialCursor&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt;) (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;) {
 &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialCursor&lt;/span&gt;

 &lt;span style=&#34;color:#a6e22e&#34;&gt;kinds&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#a6e22e&#34;&gt;tokenKind&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;identifierKind&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;numericKind&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;stringKind&lt;/span&gt;}
    
 &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;kind&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;kinds&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;newCursor&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parseToken&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tokens&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;kind&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {
   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;expression&lt;/span&gt;{
    &lt;span style=&#34;color:#a6e22e&#34;&gt;literal&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;kind&lt;/span&gt;:    &lt;span style=&#34;color:#a6e22e&#34;&gt;literalKind&lt;/span&gt;,
   }, &lt;span style=&#34;color:#a6e22e&#34;&gt;newCursor&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
  }
 }

 &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;initialCursor&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;expression 只包括了stringKind，numericKind，identifierKind的字符集合。parseexpression读入一个token，如果cursor超出了tokens的长度或者Kind不是这三种，则返回错误的结果，遇到分隔符delimiter则正常返回。&lt;/p&gt;
&lt;h4 id=&#34;create语句&#34;&gt;CREATE语句&lt;/h4&gt;
&lt;p&gt;语法成分&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CREATE TABLE  $tableName$ ( $columnDef$ )&lt;/p&gt;
&lt;p&gt;example:CREATE TABLE students(id string, age int, name string)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.解析出keyword CREATE&lt;/p&gt;
&lt;p&gt;2.解析出keyword TABLE&lt;/p&gt;
&lt;p&gt;3.解析identifier  $tableName$&lt;/p&gt;
&lt;p&gt;4.解析 symbol &lt;em&gt;(&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;5.解析$columndef$&lt;/p&gt;
&lt;p&gt;6.解析symbol &lt;em&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;解析CREATE的语句关键是对$columnDef$的解析&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//column
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;columnDefinition&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
 &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt;
 &lt;span style=&#34;color:#a6e22e&#34;&gt;datatype&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解析columnDefinitions&lt;/p&gt;
&lt;p&gt;1.循环解析token，直到cur超出tokens范围或者解析出现错误&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;首先解析identifier $name$,keyword $datatype$&lt;/li&gt;
&lt;li&gt;解析分隔符 symbol &lt;em&gt;&lt;strong&gt;,&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// parse col def
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parseColumnDefinitions&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tokens&lt;/span&gt; []&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;initialCursor&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;delimiter&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;token&lt;/span&gt;) (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;[]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;columnDefinition&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;uint&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;) {
 &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialCursor&lt;/span&gt;

 &lt;span style=&#34;color:#a6e22e&#34;&gt;cds&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;columnDefinition&lt;/span&gt;{}
 &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; uint(len(&lt;span style=&#34;color:#a6e22e&#34;&gt;tokens&lt;/span&gt;)) {
   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;initialCursor&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
  }

  &lt;span style=&#34;color:#75715e&#34;&gt;// Look for a delimiter
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tokens&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt;]
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delimiter&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;equals&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;current&lt;/span&gt;) {
   &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
  }

  &lt;span style=&#34;color:#75715e&#34;&gt;// Look for a comma
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// col devided by comma
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;cds&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {
   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;expectToken&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tokens&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;tokenFromSymbol&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;commaSymbol&lt;/span&gt;)) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;helpMessage&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tokens&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Expected comma&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;initialCursor&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
   }

   &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
  }

  &lt;span style=&#34;color:#75715e&#34;&gt;// Look for a column name
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;newCursor&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parseToken&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tokens&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;identifierKind&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {
   &lt;span style=&#34;color:#a6e22e&#34;&gt;helpMessage&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tokens&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Expected column name&amp;#34;&lt;/span&gt;)
   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;initialCursor&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
  }
  &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;newCursor&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;// Look for a column type
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;//like col_name type
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;ty&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;newCursor&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parseToken&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tokens&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;keywordKind&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {
   &lt;span style=&#34;color:#a6e22e&#34;&gt;helpMessage&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tokens&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Expected column type&amp;#34;&lt;/span&gt;)
   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;initialCursor&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
  }
  &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;newCursor&lt;/span&gt;

  &lt;span style=&#34;color:#a6e22e&#34;&gt;cds&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;cds&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;columnDefinition&lt;/span&gt;{
   &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;:     &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;,
   &lt;span style=&#34;color:#a6e22e&#34;&gt;datatype&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ty&lt;/span&gt;,
  })
 }

 &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;cds&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;insert语句&#34;&gt;INSERT语句&lt;/h4&gt;
&lt;p&gt;语法成分&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;INSERT INTO VALUES ( $expression[]$ )&lt;/p&gt;
&lt;p&gt;example: INSERT INTO VALUES(1,20,Kate)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.解析keyword INSERT&lt;/p&gt;
&lt;p&gt;2.解析keyword INTO&lt;/p&gt;
&lt;p&gt;3.解析keyword VALUES&lt;/p&gt;
&lt;p&gt;4.解析symbol &lt;em&gt;(&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;5.解析 $expression[]$&lt;/p&gt;
&lt;p&gt;6.解析symbol &lt;em&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;主函数parse&#34;&gt;主函数parse&lt;/h3&gt;
&lt;p&gt;主函数分号作为分隔符解析三种sql语句&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Parse&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;source&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Ast&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
 &lt;span style=&#34;color:#a6e22e&#34;&gt;tokens&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lex&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;source&lt;/span&gt;)
 &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
 }

 &lt;span style=&#34;color:#a6e22e&#34;&gt;ast&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Ast&lt;/span&gt;{}
 &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; uint(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
 &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt; &amp;lt; uint(len(&lt;span style=&#34;color:#a6e22e&#34;&gt;source&lt;/span&gt;)) {
  &lt;span style=&#34;color:#75715e&#34;&gt;//parse each statement divide by &amp;#39;;&amp;#39; and add to ast
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;stmt&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;newCursor&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parseStatement&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tokens&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;tokenFromSymbol&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;semicolonSymbol&lt;/span&gt;))
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {
   &lt;span style=&#34;color:#a6e22e&#34;&gt;helpMessage&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tokens&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Expected statement&amp;#34;&lt;/span&gt;)
   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed to parse,exit&amp;#34;&lt;/span&gt;)
  }
  &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;newCursor&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;ast&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Statement&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;ast&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Statement&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;stmt&lt;/span&gt;)

  &lt;span style=&#34;color:#a6e22e&#34;&gt;atLeastOneSemicolon&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expectToken&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tokens&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;tokenFromSymbol&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;semicolonSymbol&lt;/span&gt;)) {
   &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
   &lt;span style=&#34;color:#a6e22e&#34;&gt;atLeastOneSemicolon&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;atLeastOneSemicolon&lt;/span&gt; {
   &lt;span style=&#34;color:#a6e22e&#34;&gt;helpMessage&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tokens&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;cursor&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Expected semi-colon delimiter between statements&amp;#34;&lt;/span&gt;)
   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Missing semi-colon between statements&amp;#34;&lt;/span&gt;)
  }
 }
 &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ast&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;简易后端&#34;&gt;简易后端&lt;/h2&gt;
&lt;p&gt;本文重点在于解析sql语句以及前端的编写思路，这次仅仅使用一个map in memory 作为后端。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// backend in memory
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MemoryBackend&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
 &lt;span style=&#34;color:#a6e22e&#34;&gt;tables&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;table&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;// table
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
 &lt;span style=&#34;color:#a6e22e&#34;&gt;columns&lt;/span&gt;     []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
 &lt;span style=&#34;color:#a6e22e&#34;&gt;columnTypes&lt;/span&gt; []&lt;span style=&#34;color:#a6e22e&#34;&gt;ColumnType&lt;/span&gt;
 &lt;span style=&#34;color:#a6e22e&#34;&gt;rows&lt;/span&gt;        [][]&lt;span style=&#34;color:#a6e22e&#34;&gt;MemoryCell&lt;/span&gt;
}

&lt;span style=&#34;color:#75715e&#34;&gt;//Result
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Results&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
 &lt;span style=&#34;color:#a6e22e&#34;&gt;Columns&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;Type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ColumnType&lt;/span&gt;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
 }
 &lt;span style=&#34;color:#a6e22e&#34;&gt;Rows&lt;/span&gt; [][]&lt;span style=&#34;color:#a6e22e&#34;&gt;Cell&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;repl&#34;&gt;REPL&lt;/h2&gt;
&lt;p&gt;下面是一个简单的REPL设计思路&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
 &lt;span style=&#34;color:#a6e22e&#34;&gt;mb&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NewMemoryBackend&lt;/span&gt;()

 &lt;span style=&#34;color:#a6e22e&#34;&gt;reader&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bufio&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewReader&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Stdin&lt;/span&gt;)
 &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Welcome to &amp;#34;&lt;/span&gt;)
 &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;# &amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#a6e22e&#34;&gt;text&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reader&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ReadString&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;)
  &lt;span style=&#34;color:#a6e22e&#34;&gt;text&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;strings&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Replace&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;text&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

  &lt;span style=&#34;color:#a6e22e&#34;&gt;ast&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Parse&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;text&lt;/span&gt;)
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
   panic(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;stmt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ast&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Statements&lt;/span&gt; {
   &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;stmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Kind&lt;/span&gt; {
   &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CreateKind&lt;/span&gt;:
    
   &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InsertKind&lt;/span&gt;:
    
   &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SelectKind&lt;/span&gt;:
      
   }
 }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其他剩余代码见&lt;a href=&#34;https://github.com/noneback/gosql&#34;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://notes.eatonphil.com/database-basics.html&#34;&gt;Writing a SQL database from scratch in Go&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.postgresql.org/docs/current/sql-syntax-lexical.html&#34;&gt;PostgreSQL documentation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/eatonphil/gosql&#34;&gt;gosql&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>