<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IO on NoneBack</title>
    <link>https://noneback.github.io/zh/tags/io/</link>
    <description>Recent content in IO on NoneBack created by </description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>@NoneBack All rights reserved</copyright>
    <lastBuildDate>Sun, 15 Aug 2021 21:47:45 +0800</lastBuildDate><atom:link href="https://noneback.github.io/zh/tags/io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Epoll and IO复用</title>
      <link>https://noneback.github.io/zh/blog/zh/epoll-and-io%E5%A4%8D%E7%94%A8/</link>
      <pubDate>Sun, 15 Aug 2021 21:47:45 +0800</pubDate>
      
      <guid>https://noneback.github.io/zh/blog/zh/epoll-and-io%E5%A4%8D%E7%94%A8/</guid>
      <description>&lt;p&gt;先从epoll说起。&lt;/p&gt;
&lt;p&gt;epoll是Linux内核的可拓展IO事件通知机制，设计的目的是取代select和poll，是为了处理大量文件描述符而改进的poll，支持打开文件描述符上限是系统最大文件打开数目，性能优异。&lt;/p&gt;
&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;h3 id=&#34;api&#34;&gt;API&lt;/h3&gt;
&lt;p&gt;epoll相关的系统调用有三个&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** epoll_create
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *  创建一个epoll句柄，返回错误码
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *  使用之后需要被关闭，因为epfd也会消耗系统fd数量。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *  size : 标识epfd监听fd的数量
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt; 
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;epoll_create&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size);

&lt;span style=&#34;color:#75715e&#34;&gt;/** epoll_ctl
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *  添加epoll监控对象，epoll事件的注册函数，返回错误码
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *  epfd : epoll fd
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *  op : 操作类型
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *       EPOLL_CTL_ADD : 注册新的fd到epfd中
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *       EPOLL_CTL_MOD : 修改已经注册的fd的监听事件
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *      EPOLL_CTL_DEL : 从epfd中删除一个fd
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *  fd : 需要监听的fd
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *  event : 需要监听的事件
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     EPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     EPOLLOUT：表示对应的文件描述符可以写；
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     EPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     EPOLLERR：表示对应的文件描述符发生错误；
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *      EPOLLHUP：表示对应的文件描述符被挂断；
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *     EPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *      EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;epoll_ctl&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; epfd, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; op, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; fd, &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;epoll_event&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;event);

&lt;span style=&#34;color:#75715e&#34;&gt;/** epoll_wait
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * 收集已经触发了的事件，返回触发事件的数目，0代表超时
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * epfd : epoll fd
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * events : epoll将触发的事件赋值到events数组中
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * maxevent : 告知kernel events数组的大小，不得大于epoll_create 中的 size
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * timeout : 等待超时时间，0，立即返回，-1 一直阻塞，&amp;gt; 0 等待对应时间
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;epoll_wait&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; epfd, &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;epill_event&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; events,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; timeout);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;处理过程&#34;&gt;处理过程&lt;/h3&gt;
&lt;h3 id=&#34;epoll_create&#34;&gt;epoll_create&lt;/h3&gt;
&lt;p&gt;当一个进程调用epoll_create方法时，Linux内核会创建一个eventpoll结构体&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;eventpoll&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;/* Protect the this structure access */&lt;/span&gt;
    spinlock_t lock;

    &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * This mutex is used to ensure that files are not removed
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * while epoll is using them. This is held during the event
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * collection loop, the file cleanup path, the epoll file exit
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * code and the ctl operations.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mutex&lt;/span&gt; mtx;

    &lt;span style=&#34;color:#75715e&#34;&gt;/* Wait queue used by sys_epoll_wait() */&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/* 阻塞在epoll_wait()当前epoll实例的用户被链接到这个等待队列 */&lt;/span&gt;
    wait_queue_head_t wq;

    &lt;span style=&#34;color:#75715e&#34;&gt;/* Wait queue used by file-&amp;gt;poll() */&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/* epoll文件也可以被epoll_wait() */&lt;/span&gt;
    wait_queue_head_t poll_wait;

    &lt;span style=&#34;color:#75715e&#34;&gt;/* List of ready file descriptors */&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/* 已经ready的epitem的链表 */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list_head&lt;/span&gt; rdllist;

    &lt;span style=&#34;color:#75715e&#34;&gt;/* RB tree root used to store monitored fd structs */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_root&lt;/span&gt; rbr;

    &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * This is a single linked list that chains all the &amp;#34;struct epitem&amp;#34; that
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * happened while transfering ready events to userspace w/out
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * holding -&amp;gt;lock.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/* 见ep_poll_callback()以及ep_scan_ready_list()中的注释 */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;epitem&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ovflist;

    &lt;span style=&#34;color:#75715e&#34;&gt;/* The user that created the eventpoll descriptor */&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/* 创建当前epoll实例的用户 */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user_struct&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;user;
  
  &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;file;

  &lt;span style=&#34;color:#75715e&#34;&gt;/* used to optimize loop detection check */&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; visited;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list_head&lt;/span&gt; visited_list_link;&lt;span style=&#34;color:#75715e&#34;&gt;//双向链表中保存着将要通过epoll_wait返回给用户的、满足条件的事件
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在epoll_create中，epoll向内核注册了一个红黑树，用于存储上述的被监控socket。当你调用epoll_create时，就会在这个rb tree里创建一个file结点，通过rb tree查询对应的socket fd。&lt;/p&gt;
&lt;p&gt;同时，它还会创建一个双向链表用于存储准备就绪的事件。&lt;/p&gt;
&lt;h3 id=&#34;epoll_ctl&#34;&gt;epoll_ctl&lt;/h3&gt;
&lt;p&gt;在epoll中，对于每一个事件都会建立一个epitem结构体：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Each file descriptor added to the eventpoll interface will
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * have an entry of this type linked to the &amp;#34;rbr&amp;#34; RB tree.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;epitem&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;/* RB tree node used to link this structure to the eventpoll RB tree */&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/* eventpoll内部的红黑树的挂载点 */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_node&lt;/span&gt; rbn;

    &lt;span style=&#34;color:#75715e&#34;&gt;/* List header used to link this structure to the eventpoll ready list */&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/* 所有已经ready的epitem都会被挂载到eventpoll的rdllist中 */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list_head&lt;/span&gt; rdllink;

    &lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Works together &amp;#34;struct eventpoll&amp;#34;-&amp;gt;ovflist in keeping the
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * single linked chain of items.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/* 配合eventpoll-&amp;gt;ovflist使用 */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;epitem&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;next;

    &lt;span style=&#34;color:#75715e&#34;&gt;/* The file descriptor information this item refers to */&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/* 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * 作为evetnpoll内部的红黑树节点的key
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;epoll_filefd&lt;/span&gt; ffd;

    &lt;span style=&#34;color:#75715e&#34;&gt;/* Number of active wait queue attached to poll operations */&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/* 监听队列挂载数 */&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/* 难道一个epitem还能同时挂载到多个监听队列？ */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nwait;

    &lt;span style=&#34;color:#75715e&#34;&gt;/* List containing poll wait queues */&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/* 链接当前epitem对应的eppoll_entry结构 */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list_head&lt;/span&gt; pwqlist;

    &lt;span style=&#34;color:#75715e&#34;&gt;/* The &amp;#34;container&amp;#34; of this item */&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/* 关联当前epitem所属的epollevent */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;eventpoll&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ep;

    &lt;span style=&#34;color:#75715e&#34;&gt;/* List header used to link this item to the &amp;#34;struct file&amp;#34; items list */&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/* 与所监听的struct file进行链接 */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;list_head&lt;/span&gt; fllink;

    &lt;span style=&#34;color:#75715e&#34;&gt;/* The structure that describe the interested events and the source fd */&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;/* 通过epoll_ctl从用户空间传过来的数据，表示当前epitem关心的events */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;epoll_event&lt;/span&gt; event;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/08/15/ZH6Pixq4X5BLc2z.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在调用epoll_ctl时，除了将socket fd注册到eventpoll的rb tree，它还会给内核中断处理程序注册一个回调函数。当这个fd的中断到了，就把它放入就绪链表中。当一个socket上有数据到了，内核在把网卡上的数据copy到内核中后就来把socket插入到准备就绪链表里了。&lt;/p&gt;
&lt;h3 id=&#34;epoll_wait&#34;&gt;epoll_wait&lt;/h3&gt;
&lt;p&gt;当epoll_wait调用时，仅仅观察这个list链表里有没有数据即eptime项即可。有数据就返回，没有数据就sleep，等到timeout时间到后即使链表没数据也返回。&lt;/p&gt;
&lt;h2 id=&#34;epoll使用模型&#34;&gt;Epoll使用模型&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;( ; ; )  
   {  
       nfds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; epoll_wait(epfd,events,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;);  
       &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;nfds;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)  
       {  
           &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(events[i].data.fd&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;listenfd) &lt;span style=&#34;color:#75715e&#34;&gt;//有新的连接  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;           {  
               connfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; accept(listenfd,(sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;clientaddr, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;clilen); &lt;span style=&#34;color:#75715e&#34;&gt;//accept这个连接  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;               ev.data.fd&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;connfd;  
               ev.events&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;EPOLLIN&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;EPOLLET;  
               epoll_ctl(epfd,EPOLL_CTL_ADD,connfd,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ev); &lt;span style=&#34;color:#75715e&#34;&gt;//将新的fd添加到epoll的监听队列中  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;           }  
  
           &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt;( events[i].events&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;EPOLLIN ) &lt;span style=&#34;color:#75715e&#34;&gt;//接收到数据，读socket  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;           {  
               n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read(sockfd, line, MAXLINE)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//读  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;               ev.data.ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; md;     &lt;span style=&#34;color:#75715e&#34;&gt;//md为自定义类型，添加数据  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;               ev.events&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;EPOLLOUT&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;EPOLLET;  
               epoll_ctl(epfd,EPOLL_CTL_MOD,sockfd,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ev);&lt;span style=&#34;color:#75715e&#34;&gt;//修改标识符，等待下一个循环时发送数据，异步处理的精髓  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;           }  
           &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt;(events[i].events&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;EPOLLOUT) &lt;span style=&#34;color:#75715e&#34;&gt;//有数据待发送，写socket  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;           {  
               &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;myepoll_data&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; md &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (myepoll_data&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)events[i].data.ptr;    &lt;span style=&#34;color:#75715e&#34;&gt;//取数据  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;               sockfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; md&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;fd;  
               send( sockfd, md&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ptr, strlen((&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)md&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;ptr), &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; );        &lt;span style=&#34;color:#75715e&#34;&gt;//发送数据  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;               ev.data.fd&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;sockfd;  
               ev.events&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;EPOLLIN&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;EPOLLET;  
               epoll_ctl(epfd,EPOLL_CTL_MOD,sockfd,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ev); &lt;span style=&#34;color:#75715e&#34;&gt;//修改标识符，等待下一个循环时接收数据  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;           }  
           &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;  
           {  
               &lt;span style=&#34;color:#75715e&#34;&gt;//其他的处理  
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;           }  
       }  
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;阻塞io非阻塞ioio复用&#34;&gt;阻塞IO、非阻塞IO、IO复用&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;阻塞IO&lt;/strong&gt;意味着线程在数据未到达时需要等待数据到达，阻塞的进程是不应当占用CPU的，此时需要让出CPU，调入新的task占用CPU。知道数据到达，再重新获取将这个task调入CPU执行。用户进程独立处理业务&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/08/15/wGvIL8PprxeQDin.png&#34; alt=&#34;Screenshot_20210815_220328.png&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt; printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Calling recv(). &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
 ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  recv(socket, recv_buf, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(recv_buf), &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;); 
 printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Had called recv(). &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;基于此，当大量task出现读写请求时，大量的CPU上下文切换，task调度，效率可能会低下&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非阻塞IO&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当用户线程发起一个IO操作后，并不需要等待，而是马上就得到了一个结果。如果结果是一个error时，它就知道数据还没有准备好，于是它可以再次发送IO操作。一旦内核中的数据准备好了，并且又再次收到了用户线程的请求，那么它马上就将数据拷贝到了用户线程，然后返回。&lt;/p&gt;
&lt;p&gt;在非阻塞IO模型中，用户线程需要不断地询问内核数据是否就绪，也就说非阻塞IO不会交出CPU，而会一直占用CPU。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/08/15/trBfHZLsSAjCi2E.png&#34; alt=&#34;Screenshot_20210815_220424.png&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
{
 printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Calling recv(). &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
 ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  recv(socket, recv_buf, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(recv_buf), &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;); 
 &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (EAGAIN &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ret) {&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt;(ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) { &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;}
 printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Had called recv(), retry.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于非阻塞IO就有一个非常严重的问题，在while循环中需要不断地去询问内核数据是否就绪，这样会导致CPU占用率非常高，因此一般情况下很少使用while循环这种方式来读取数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IO复用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;阻塞IO的问题是，业务交由线程处理，阻塞导致大量的资源被占用；阻塞与恢复会可能会导致大量的上下文切换,效率低下；&lt;/p&gt;
&lt;p&gt;非阻塞IO的问题是，在不使用监视器的情况下，依靠死循环完成一次 IO 操作。但是这样做的效率实在是太低了，完全没有实际意义；&lt;/p&gt;
&lt;p&gt;实际上，task的运行是不可避免的，有数据需要处理，就需要CPU去执行。所以可以优化的点在于，如何减少运行处理业务的线程以减少上下文调度开销和等待线程资源占用，以及减少CPU无意义的空转。&lt;/p&gt;
&lt;p&gt;IO复用的基本思想就是，在一个线程中管理监听多个fd事件，减少上下文切换；采用事件通知机制，减少CPU的空转；&lt;/p&gt;
&lt;p&gt;由此衍生出的select，poll，epoll，不过此乃他话，姑且不论。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/lojunren/p/3856290.html&#34;&gt;Linux下的I/O复用与epoll详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.infoq.cn/article/26lpjzsp9echwgnic7lq&#34;&gt;深入理解 epoll&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>