<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leetcode on NoneBack</title>
    <link>https://noneback.github.io/zh/tags/leetcode/</link>
    <description>Recent content in leetcode on NoneBack created by </description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>@NoneBack All rights reserved</copyright>
    <lastBuildDate>Mon, 16 Nov 2020 00:52:04 +0800</lastBuildDate><atom:link href="https://noneback.github.io/zh/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LC406 根据身高重建队列</title>
      <link>https://noneback.github.io/zh/blog/zh/lc406-%E6%A0%B9%E6%8D%AE%E8%BA%AB%E9%AB%98%E9%87%8D%E5%BB%BA%E9%98%9F%E5%88%97/</link>
      <pubDate>Mon, 16 Nov 2020 00:52:04 +0800</pubDate>
      
      <guid>https://noneback.github.io/zh/blog/zh/lc406-%E6%A0%B9%E6%8D%AE%E8%BA%AB%E9%AB%98%E9%87%8D%E5%BB%BA%E9%98%9F%E5%88%97/</guid>
      <description>&lt;p&gt;今天的每日一题是&lt;a href=&#34;https://leetcode-cn.com/problems/queue-reconstruction-by-height/&#34;&gt;LC406 根据身高重建队列&lt;/a&gt;,属于贪心算法的一题，以此记录解题思路。&lt;/p&gt;
&lt;h2 id=&#34;描述&#34;&gt;描述&lt;/h2&gt;
&lt;p&gt;题目描述如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;假设有打乱顺序的一群人站成一个队列。 每个人由一个整数对(h, k)表示，其中h是这个人的身高，k是排在这个人前面且身高大于或等于h的人数。 编写一个算法来重建这个队列。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;示例

输入:
[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]

输出:
[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;分析&#34;&gt;分析&lt;/h2&gt;
&lt;p&gt;完成这题最主要的就是要明白每个元素顺序对k的影响。&lt;/p&gt;
&lt;p&gt;1.首先将元素排序。$h$大的放在前面，如果$h$相同，则把$k$大的放前面。&lt;/p&gt;
&lt;p&gt;2.将排序后的元素放入队列中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第 $0, \cdots, i-10,⋯,i−1 $个人已经在队列中被安排了位置，他们只要站在第 $i$ 个人的前面，就会对第 $i$ 个人产生影响，因为他们都比第 $i$ 个人高；&lt;/p&gt;
&lt;p&gt;而第 $i+1, \cdots, n-1$ 个人还没有被放入队列中，并且他们无论站在哪里，对第 $i$ 个人都没有任何影响，因为他们都比第 $i$ 个人矮。&lt;/p&gt;
&lt;p&gt;也就是说，当我们放入第 $i$ 个人时，只需要将其插入队列中，使得他的前面恰好有 $k_i$ 个人即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;代码&#34;&gt;代码&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @lc app=leetcode.cn id=406 lang=cpp
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * [406] 根据身高重建队列
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// @lc code=start
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;include&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bits&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stdc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;std&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
 &lt;span style=&#34;color:#a6e22e&#34;&gt;public&lt;/span&gt;:
  &lt;span style=&#34;color:#a6e22e&#34;&gt;vector&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;vector&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reconstructQueue&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;vector&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;vector&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;people&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;sort&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;people&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;people&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;(),
         [](&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vector&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vector&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;) {
           &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &amp;lt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
         });

    &lt;span style=&#34;color:#a6e22e&#34;&gt;vector&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;vector&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ans&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vector&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;person&lt;/span&gt; : &lt;span style=&#34;color:#a6e22e&#34;&gt;people&lt;/span&gt;) {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;ans&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ans&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;person&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#a6e22e&#34;&gt;person&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ans&lt;/span&gt;;
  }
};
&lt;span style=&#34;color:#75715e&#34;&gt;// @lc code=end
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/queue-reconstruction-by-height/solution/gen-ju-shen-gao-zhong-jian-dui-lie-by-leetcode-sol/&#34;&gt;题解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/queue-reconstruction-by-height/&#34;&gt;LC406 根据身高重建队列&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LC402 移除K位数字</title>
      <link>https://noneback.github.io/zh/blog/zh/lc402-%E7%A7%BB%E9%99%A4k%E4%BD%8D%E6%95%B0%E5%AD%97/</link>
      <pubDate>Sun, 15 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://noneback.github.io/zh/blog/zh/lc402-%E7%A7%BB%E9%99%A4k%E4%BD%8D%E6%95%B0%E5%AD%97/</guid>
      <description>&lt;p&gt;今天的每日一题是 LC402 移除 K 位数字,最终看题解完成，记录一下思路。&lt;/p&gt;
&lt;h2 id=&#34;描述&#34;&gt;描述&lt;/h2&gt;
&lt;p&gt;题目的描述如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个以字符串表示的非负整数 num，移除这个数中的 k 位数字，使得剩下的数字最小。&lt;/p&gt;
&lt;p&gt;注意:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;num 的长度小于 10002 且 ≥ k。
num 不会包含任何前导零。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;示例&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; :

&lt;span style=&#34;color:#a6e22e&#34;&gt;输入&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1432219&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;输出&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1219&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;解释&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;移除掉三个数字&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;和&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;形成一个新的最小的数字&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1219&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;分析&#34;&gt;分析&lt;/h2&gt;
&lt;p&gt;这个题的关键是判断那一些位的数字需要被丢弃，以此组成一个最小的数字。&lt;/p&gt;
&lt;p&gt;所以我们需要：&lt;/p&gt;
&lt;p&gt;1.数字大小的比较。&lt;/p&gt;
&lt;p&gt;2.怎么判断数字是否需要被丢弃&lt;/p&gt;
&lt;h3 id=&#34;数字大小的比较&#34;&gt;数字大小的比较&lt;/h3&gt;
&lt;p&gt;我们判断两个数字大小时，是通过其不相同的最高位数字大小来比较的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.首先判断数的位数，相同则进行下一步。否则位数多的大。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a=12xxx,b=11xxxx,显然 a&amp;lt;b&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.位数相同时，一位一位比较，从高到低。相同的则跳过，直到有一位能分出大小。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a=12xxxxx,b=13xxxxx,此时由于第二位 2&amp;lt;3,所以有 a&amp;gt;b&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;判断数字是否丢弃&#34;&gt;判断数字是否丢弃&lt;/h3&gt;
&lt;h4 id=&#34;丢弃条件&#34;&gt;丢弃条件&lt;/h4&gt;
&lt;p&gt;贪心策略:&lt;/p&gt;
&lt;p&gt;对数字$D_1D_2&amp;hellip;D_x$,如果有位置$i$,使得$D_i&amp;lt;D_{i-1}$,此时要把$D_{i-1}$丢弃。&lt;/p&gt;
&lt;p&gt;如果不存在,说明整个数字序列单调不降（像 123456789），此时删去最后一个数字即可。&lt;/p&gt;
&lt;p&gt;下面对题目简单的模拟:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;设 num=1432219,n=3,遍历 num,每次只与左边数的进行比较，如果比左边大则放入，反之则丢弃左边数字，并继续和左边的数比较、放入、丢弃步骤。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后的结果必然是数字序列单调不降，所以我们使用一个单调栈来保存未被丢弃的数字。&lt;/p&gt;
&lt;p&gt;如果此时丢弃的数位依旧不足，则丢弃最后的几位数字。&lt;/p&gt;
&lt;h2 id=&#34;代码&#34;&gt;代码&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @lc app=leetcode.cn id=402 lang=cpp
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * [402] 移掉K位数字
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;// @lc code=start
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 单调栈+贪心
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;include&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bits&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stdc&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt;&amp;gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;std&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; {
 &lt;span style=&#34;color:#a6e22e&#34;&gt;public&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;removeKdigits&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;vector&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;char&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt; : &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;) {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;() &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;back&lt;/span&gt;() &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt;) {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop_back&lt;/span&gt;();
        &lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
      }
      &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push_back&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#75715e&#34;&gt;// 处理未处理的k,此时数据已是单调增，去除最后几位
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;){
        &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pop_back&lt;/span&gt;();
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ans&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;begWithZero&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;digit&lt;/span&gt; : &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;digit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;begWithZero&lt;/span&gt;) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
      }
      &lt;span style=&#34;color:#a6e22e&#34;&gt;begWithZero&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;ans&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;digit&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ans&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#a6e22e&#34;&gt;ans&lt;/span&gt;;
  }
};
&lt;span style=&#34;color:#75715e&#34;&gt;// @lc code=end
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/remove-k-digits&#34;&gt;LC402&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode-cn.com/problems/remove-k-digits/solution/yi-diao-kwei-shu-zi-by-leetcode-solution/&#34;&gt;官方题解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://oi-wiki.org/ds/monotonous-stack/&#34;&gt;单调栈&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>